{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Business Dashboard Application\n\n## Overview\n\nThis is a comprehensive business dashboard application built with a full-stack architecture. The application provides real-time business insights and analytics across multiple domains including e-commerce, advertising, cash flow, customer service, and growth metrics. It features a modern React frontend with shadcn/ui components and an Express.js backend with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\nThe client-side is built using **React with TypeScript** and follows a component-based architecture:\n\n- **UI Framework**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query for server state management\n- **Build Tool**: Vite for development and production builds\n\nThe application supports both light and dark themes through a context-based theme provider. The layout uses a responsive sidebar navigation pattern that adapts to mobile devices.\n\n### Backend Architecture\n\nThe server-side uses **Express.js** with TypeScript:\n\n- **API Structure**: RESTful endpoints organized by business domains\n- **Development Setup**: Vite middleware integration for seamless development\n- **Error Handling**: Centralized error handling with proper HTTP status codes\n- **Logging**: Request/response logging for API endpoints\n\n### Data Storage Solutions\n\n**Primary Database**: PostgreSQL with Drizzle ORM\n- **Schema Management**: Drizzle Kit for migrations and schema definitions\n- **Connection**: Neon Database serverless PostgreSQL\n- **Fallback Storage**: In-memory storage implementation for development\n\nThe database schema includes tables for users, dashboard metrics, and chart data with proper relationships and constraints.\n\n### Database Schema Design\n\nThree main entities drive the application:\n- **Users**: Authentication and user management\n- **Dashboard Metrics**: KPI data organized by business sections\n- **Chart Data**: Visualization data stored as JSONB for flexibility\n\nEach metric is categorized by section (dashboard, ecommerce, advertising, etc.) allowing for efficient querying and organization.\n\n### Page Structure and Routing\n\nThe application is organized into distinct business intelligence sections:\n- **Dashboard Overview**: High-level business metrics\n- **E-commerce Management**: Sales and order analytics\n- **Advertising Performance**: Campaign ROI and metrics\n- **Cash Flow Management**: Financial tracking\n- **Customer Service Analytics**: Support metrics\n- **Customer Analytics**: User behavior analysis\n- **Growth Reports**: Business growth trends\n\n### Component Architecture\n\n**Reusable Components**:\n- **KPICard**: Displays key performance indicators with trend indicators\n- **ChartCard**: Wrapper for chart visualizations with filtering options\n- **DashboardLayout**: Main layout with responsive sidebar navigation\n\n**UI Component System**:\nBuilt on shadcn/ui providing consistent, accessible components including forms, data display, navigation, and feedback elements.\n\n## External Dependencies\n\n### Core Framework Dependencies\n\n- **React 18**: Frontend framework with modern concurrent features\n- **Express.js**: Backend web application framework\n- **TypeScript**: Type safety across the entire application\n\n### Database and ORM\n\n- **Drizzle ORM**: Type-safe database operations and schema management\n- **Neon Database**: Serverless PostgreSQL hosting\n- **connect-pg-simple**: PostgreSQL session store integration\n\n### UI and Styling\n\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Unstyled, accessible UI components\n- **Lucide React**: Icon library for consistent iconography\n\n### Data Fetching and State Management\n\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema parsing\n\n### Development and Build Tools\n\n- **Vite**: Build tool and development server\n- **ESBuild**: Fast JavaScript bundler for production\n- **PostCSS**: CSS processing with autoprefixer\n\n### Visualization and Charts\n\n- **Chart.js**: Canvas-based charting library\n- **date-fns**: Date manipulation and formatting utilities\n\n### Authentication and Sessions\n\nThe application is structured to support session-based authentication with PostgreSQL session storage, though the current implementation focuses on the dashboard functionality.","size_bytes":4657},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { addRealEcommerceRoutes } from \"./routes/realEcommerce\";\nimport cron from \"node-cron\";\nimport { storage } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// 기본 스케줄러 함수들\nfunction startBasicSchedulers() {\n  // 매 30분마다 재고 부족 체크\n  cron.schedule(\"*/30 * * * *\", async () => {\n    log(\"재고 부족 알림 체크 중...\");\n    try {\n      const alerts = await storage.getInventoryAlerts();\n      if (alerts.length > 0) {\n        log(`재고 부족 알림: ${alerts.length}개 상품`);\n        // 실제로는 알림 시스템으로 전송\n      }\n    } catch (error) {\n      log(\"재고 체크 오류: \" + error.message);\n    }\n  });\n\n  // 매 시간마다 주문 상태 체크\n  cron.schedule(\"0 * * * *\", async () => {\n    log(\"주문 상태 업데이트 중...\");\n    try {\n      const statusCounts = await storage.getOrderStatusCounts();\n      log(\n        `주문 현황 - New: ${statusCounts[0]?.count || 0}, Processing: ${statusCounts[1]?.count || 0}`,\n      );\n    } catch (error) {\n      log(\"주문 상태 체크 오류: \" + error.message);\n    }\n  });\n\n  // 매일 오전 9시 일간 리포트 생성\n  cron.schedule(\"0 9 * * *\", async () => {\n    log(\"일간 리포트 생성 중...\");\n    try {\n      // 어제 주문 수 계산\n      const yesterdayStart = new Date();\n      yesterdayStart.setDate(yesterdayStart.getDate() - 1);\n      yesterdayStart.setHours(0, 0, 0, 0);\n\n      const yesterdayEnd = new Date();\n      yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);\n      yesterdayEnd.setHours(23, 59, 59, 999);\n\n      // 간단한 일간 리포트 로그\n      log(\"일간 리포트: 어제 비즈니스 활동 요약 생성 완료\");\n    } catch (error) {\n      log(\"일간 리포트 생성 오류: \" + error.message);\n    }\n  });\n\n  log(\"기본 스케줄러들이 시작되었습니다.\");\n}\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // 이커머스 실제 API 라우트 추가\n  addRealEcommerceRoutes(app);\n\n  // 알림 관련 API 라우트 추가\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      // 실시간 알림 데이터 (현재는 Mock)\n      const alerts = [\n        {\n          id: 1,\n          type: \"inventory\",\n          severity: \"high\",\n          title: \"재고 부족 알림\",\n          message: \"Smart Watch Pro 재고가 5개 남았습니다 (최소: 10개)\",\n          timestamp: new Date().toISOString(),\n          isRead: false,\n        },\n        {\n          id: 2,\n          type: \"cash_flow\",\n          severity: \"medium\",\n          title: \"현금흐름 주의\",\n          message: \"현재 운영 가능 기간이 18일 남았습니다\",\n          timestamp: new Date(Date.now() - 3600000).toISOString(),\n          isRead: false,\n        },\n        {\n          id: 3,\n          type: \"roas\",\n          severity: \"high\",\n          title: \"ROAS 하락 경고\",\n          message: \"페이스북 ROAS가 180%로 목표치(300%) 미달\",\n          timestamp: new Date(Date.now() - 1800000).toISOString(),\n          isRead: false,\n        },\n      ];\n\n      res.json({ success: true, alerts });\n    } catch (error) {\n      res.status(500).json({ message: \"알림 조회 실패\" });\n    }\n  });\n\n  // 알림 읽음 처리\n  app.patch(\"/api/alerts/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      // 실제로는 DB 업데이트\n      res.json({ success: true, message: `알림 ${id} 읽음 처리 완료` });\n    } catch (error) {\n      res.status(500).json({ message: \"알림 읽음 처리 실패\" });\n    }\n  });\n\n  // 스케줄러 상태 조회\n  app.get(\"/api/scheduler/status\", (req, res) => {\n    try {\n      res.json({\n        success: true,\n        schedulers: {\n          inventoryCheck: {\n            running: true,\n            interval: \"30분마다\",\n            description: \"재고 부족 상품 체크\",\n          },\n          orderStatusCheck: {\n            running: true,\n            interval: \"1시간마다\",\n            description: \"주문 상태 모니터링\",\n          },\n          dailyReport: {\n            running: true,\n            interval: \"매일 오전 9시\",\n            description: \"일간 비즈니스 리포트 생성\",\n          },\n        },\n        lastRun: new Date().toISOString(),\n        message: \"모든 스케줄러가 정상 작동 중입니다\",\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"스케줄러 상태 조회 실패\" });\n    }\n  });\n\n  // 수동 알림 체크 트리거\n  app.post(\"/api/scheduler/trigger-alerts\", async (req, res) => {\n    try {\n      log(\"수동 알림 체크 트리거됨\");\n\n      // 재고 부족 체크\n      const alerts = await storage.getInventoryAlerts();\n      const orderStatusCounts = await storage.getOrderStatusCounts();\n\n      const result = {\n        inventoryAlerts: alerts.length,\n        orderCounts: orderStatusCounts,\n        timestamp: new Date().toISOString(),\n      };\n\n      log(`수동 알림 체크 완료 - 재고 알림: ${alerts.length}개`);\n      res.json({ success: true, result });\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"수동 알림 체크 실패\", error: error.message });\n    }\n  });\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || \"3000\", 10);\n  server.listen(\n    {\n      port,\n      host: \"0.0.0.0\",\n    },\n    () => {\n      log(`serving on port ${port}`);\n      log(`스케줄러 시스템 활성화됨`);\n\n      // 스케줄러 시작\n      startBasicSchedulers();\n    },\n  );\n})();\n","size_bytes":6892},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Get dashboard metrics for a specific section\n  app.get(\"/api/metrics/:section\", async (req, res) => {\n    try {\n      const { section } = req.params;\n      const metrics = await storage.getDashboardMetrics(section);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  // Get chart data for a specific section\n  app.get(\"/api/charts/:section\", async (req, res) => {\n    try {\n      const { section } = req.params;\n      const { chartId } = req.query;\n      const chartData = await storage.getChartData(section, chartId as string);\n      res.json(chartData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chart data\" });\n    }\n  });\n\n  // Get orders with optional filtering\n  app.get(\"/api/orders\", async (req, res) => {\n    try {\n      const { status, search, channel, limit, offset } = req.query;\n      const filter = {\n        status: status as string,\n        search: search as string,\n        channel: channel as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      };\n      const result = await storage.getOrders(filter);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get inventory alerts\n  app.get(\"/api/inventory/alerts\", async (req, res) => {\n    try {\n      const alerts = await storage.getInventoryAlerts();\n      res.json(alerts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch inventory alerts\" });\n    }\n  });\n\n  // Get order status counts\n  app.get(\"/api/orders/status-counts\", async (req, res) => {\n    try {\n      const statusCounts = await storage.getOrderStatusCounts();\n      res.json(statusCounts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch order status counts\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":2215},"server/storage.ts":{"content":"import { users, dashboardMetrics, chartData, orders, inventory, type User, type InsertUser, type DashboardMetric, type InsertDashboardMetric, type ChartData, type InsertChartData, type Order, type InsertOrder, type Inventory, type InsertInventory } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, ilike, sql } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getDashboardMetrics(section: string): Promise<DashboardMetric[]>;\n  getChartData(section: string, chartId?: string): Promise<ChartData[]>;\n  getOrders(filter?: { status?: string; search?: string; channel?: string; limit?: number; offset?: number }): Promise<{ items: Order[]; totalCount: number }>;\n  getInventoryAlerts(): Promise<Inventory[]>;\n  getOrderStatusCounts(): Promise<{ status: string; count: number; change?: string }[]>;\n}\n\n\n// DatabaseStorage implementation replacing MemStorage\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getDashboardMetrics(section: string): Promise<DashboardMetric[]> {\n    const metrics = await db.select().from(dashboardMetrics).where(eq(dashboardMetrics.section, section));\n    return metrics;\n  }\n\n  async getChartData(section: string, chartId?: string): Promise<ChartData[]> {\n    const charts = await db.select().from(chartData).where(\n      chartId ? \n        sql`${chartData.section} = ${section} AND ${chartData.chartId} = ${chartId}` :\n        eq(chartData.section, section)\n    );\n    return charts;\n  }\n\n  async getOrders(filter?: { status?: string; search?: string; channel?: string; limit?: number; offset?: number }): Promise<{ items: Order[]; totalCount: number }> {\n    let whereConditions = [];\n    \n    if (filter?.status) {\n      whereConditions.push(eq(orders.status, filter.status));\n    }\n    \n    if (filter?.search) {\n      const searchTerm = `%${filter.search}%`;\n      whereConditions.push(\n        sql`(${ilike(orders.orderNumber, searchTerm)} OR ${ilike(orders.customerName, searchTerm)} OR ${ilike(orders.productName, searchTerm)})`\n      );\n    }\n    \n    if (filter?.channel) {\n      whereConditions.push(eq(orders.channel, filter.channel));\n    }\n    \n    const whereClause = whereConditions.length > 0 ? sql`${sql.join(whereConditions, sql` AND `)}` : undefined;\n    \n    // Get total count\n    const [{ count }] = await db.select({ count: sql<number>`count(*)` }).from(orders).where(whereClause);\n    \n    // Get paginated results\n    const items = await db.select().from(orders)\n      .where(whereClause)\n      .orderBy(sql`${orders.orderDate} DESC`)\n      .limit(filter?.limit || 50)\n      .offset(filter?.offset || 0);\n    \n    return { items, totalCount: Number(count) };\n  }\n\n  async getInventoryAlerts(): Promise<Inventory[]> {\n    const alerts = await db.select().from(inventory)\n      .where(sql`${inventory.currentStock} <= ${inventory.minStock}`);\n    return alerts;\n  }\n\n  async getOrderStatusCounts(): Promise<{ status: string; count: number; change?: string }[]> {\n    const counts = await db.select({\n      status: orders.status,\n      count: sql<number>`count(*)`\n    })\n    .from(orders)\n    .groupBy(orders.status);\n    \n    // Add default statuses with mock change data\n    const statusMap = new Map(counts.map(c => [c.status, c.count]));\n    \n    return [\n      { status: \"New\", count: statusMap.get(\"New\") || 0, change: \"+12%\" },\n      { status: \"Preparing\", count: statusMap.get(\"Preparing\") || 0, change: \"+8%\" },\n      { status: \"Shipping\", count: statusMap.get(\"Shipping\") || 0, change: \"+15%\" },\n      { status: \"Delivered\", count: statusMap.get(\"Delivered\") || 0, change: \"+22%\" },\n    ];\n  }\n\n  // Method to seed initial data when needed\n  async seedData() {\n    // Check if data already exists\n    const existingMetrics = await db.select().from(dashboardMetrics).limit(1);\n    if (existingMetrics.length > 0) return;\n\n    // Seed dashboard metrics\n    const metricsData = [\n      // Dashboard metrics\n      { section: \"dashboard\", metricName: \"totalRevenue\", value: \"$2.4M\", change: \"+12.3%\", period: \"monthly\" },\n      { section: \"dashboard\", metricName: \"activeCustomers\", value: \"45,231\", change: \"+8.1%\", period: \"monthly\" },\n      { section: \"dashboard\", metricName: \"totalOrders\", value: \"12,847\", change: \"+15.7%\", period: \"monthly\" },\n      { section: \"dashboard\", metricName: \"conversionRate\", value: \"3.24%\", change: \"-0.5%\", period: \"monthly\" },\n      \n      // E-commerce metrics\n      { section: \"ecommerce\", metricName: \"monthlySales\", value: \"$1.8M\", change: \"+18.2%\", period: \"monthly\" },\n      { section: \"ecommerce\", metricName: \"ordersProcessed\", value: \"8,942\", change: \"+12.4%\", period: \"monthly\" },\n      { section: \"ecommerce\", metricName: \"averageOrderValue\", value: \"$201.32\", change: \"+5.8%\", period: \"monthly\" },\n      \n      // Advertising metrics\n      { section: \"advertising\", metricName: \"totalImpressions\", value: \"2.4M\", change: \"+18.2%\", period: \"monthly\" },\n      { section: \"advertising\", metricName: \"clickThroughRate\", value: \"3.24%\", change: \"+0.8%\", period: \"monthly\" },\n      { section: \"advertising\", metricName: \"costPerClick\", value: \"$0.82\", change: \"+5.1%\", period: \"monthly\" },\n      { section: \"advertising\", metricName: \"roas\", value: \"4.2x\", change: \"+12.5%\", period: \"monthly\" },\n      \n      // Customer service metrics\n      { section: \"customer-service\", metricName: \"customerSatisfaction\", value: \"4.8/5\", change: \"+0.3\", period: \"monthly\" },\n      { section: \"customer-service\", metricName: \"avgResponseTime\", value: \"2.3h\", change: \"-0.5h\", period: \"monthly\" },\n      { section: \"customer-service\", metricName: \"openTickets\", value: \"127\", change: \"+23\", period: \"weekly\" },\n      { section: \"customer-service\", metricName: \"resolutionRate\", value: \"94.2%\", change: \"+2.1%\", period: \"monthly\" },\n      \n      // Customer analytics metrics\n      { section: \"customer-analytics\", metricName: \"newCustomers\", value: \"1,247\", change: \"+18.2%\", period: \"monthly\" },\n      { section: \"customer-analytics\", metricName: \"customerRetention\", value: \"87.3%\", change: \"+3.1%\", period: \"monthly\" },\n      { section: \"customer-analytics\", metricName: \"avgOrderValue\", value: \"$187\", change: \"+12.4%\", period: \"monthly\" },\n      { section: \"customer-analytics\", metricName: \"customerLifetimeValue\", value: \"$2,347\", change: \"+8.7%\", period: \"monthly\" },\n      \n      // Growth metrics\n      { section: \"growth\", metricName: \"monthlyGrowthRate\", value: \"12.3%\", change: \"+2.1%\", period: \"monthly\" },\n      { section: \"growth\", metricName: \"marketShare\", value: \"23.7%\", change: \"+1.4%\", period: \"quarterly\" },\n      { section: \"growth\", metricName: \"revenueGrowth\", value: \"28.4%\", change: \"+5.2%\", period: \"quarterly\" },\n    ];\n\n    await db.insert(dashboardMetrics).values(metricsData);\n\n    // Seed chart data\n    const chartsData = [\n      {\n        chartId: \"revenueChart\",\n        section: \"dashboard\",\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n          datasets: [{\n            label: 'Revenue',\n            data: [180000, 220000, 280000, 260000, 320000, 380000, 420000, 380000, 450000, 480000, 520000, 580000]\n          }]\n        }\n      },\n      {\n        chartId: \"performanceChart\",\n        section: \"dashboard\",\n        data: {\n          labels: ['Desktop', 'Mobile', 'Tablet'],\n          datasets: [{\n            data: [45, 35, 20]\n          }]\n        }\n      },\n      {\n        chartId: \"salesChart\",\n        section: \"ecommerce\",\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n          datasets: [{\n            label: 'Sales',\n            data: [120000, 150000, 180000, 160000, 200000, 240000]\n          }]\n        }\n      },\n      {\n        chartId: \"adSpendChart\",\n        section: \"advertising\",\n        data: {\n          labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n          datasets: [\n            {\n              label: 'Ad Spend',\n              data: [12000, 15000, 18000, 16000, 20000, 24000],\n              borderColor: 'rgba(239, 68, 68, 1)',\n              backgroundColor: 'rgba(239, 68, 68, 0.1)',\n              yAxisID: 'y'\n            },\n            {\n              label: 'Revenue',\n              data: [48000, 75000, 90000, 80000, 100000, 120000],\n              borderColor: 'rgba(16, 185, 129, 1)',\n              backgroundColor: 'rgba(16, 185, 129, 0.1)',\n              yAxisID: 'y1'\n            }\n          ]\n        }\n      },\n      {\n        chartId: \"campaignChart\",\n        section: \"advertising\",\n        data: {\n          labels: ['Google Ads', 'Facebook', 'Instagram', 'LinkedIn', 'Twitter', 'YouTube'],\n          datasets: [{\n            label: 'Campaign Performance',\n            data: [2400000, 1800000, 1200000, 800000, 600000, 900000],\n            backgroundColor: [\n              'rgba(59, 130, 246, 0.8)',\n              'rgba(16, 185, 129, 0.8)',\n              'rgba(245, 158, 11, 0.8)',\n              'rgba(239, 68, 68, 0.8)',\n              'rgba(139, 92, 246, 0.8)',\n              'rgba(236, 72, 153, 0.8)'\n            ]\n          }]\n        }\n      }\n    ];\n\n    await db.insert(chartData).values(chartsData);\n\n    // Seed orders data\n    const ordersData = [\n      { orderNumber: \"ORD-001\", customerId: \"C001\", customerName: \"John Smith\", customerEmail: \"john@example.com\", productName: \"Smart Watch Pro\", quantity: 2, amount: \"599.98\", status: \"New\", channel: \"Website\" },\n      { orderNumber: \"ORD-002\", customerId: \"C002\", customerName: \"Sarah Johnson\", customerEmail: \"sarah@example.com\", productName: \"Wireless Headphones\", quantity: 1, amount: \"199.99\", status: \"Preparing\", channel: \"Mobile App\" },\n      { orderNumber: \"ORD-003\", customerId: \"C003\", customerName: \"Mike Wilson\", customerEmail: \"mike@example.com\", productName: \"Gaming Laptop\", quantity: 1, amount: \"1299.99\", status: \"Shipping\", channel: \"Website\" },\n      { orderNumber: \"ORD-004\", customerId: \"C004\", customerName: \"Emily Davis\", customerEmail: \"emily@example.com\", productName: \"Smartphone\", quantity: 1, amount: \"899.99\", status: \"Delivered\", channel: \"Mobile App\" },\n      { orderNumber: \"ORD-005\", customerId: \"C005\", customerName: \"David Brown\", customerEmail: \"david@example.com\", productName: \"Tablet\", quantity: 1, amount: \"499.99\", status: \"New\", channel: \"Amazon\" },\n      { orderNumber: \"ORD-006\", customerId: \"C006\", customerName: \"Lisa Wang\", customerEmail: \"lisa@example.com\", productName: \"Bluetooth Speaker\", quantity: 3, amount: \"179.97\", status: \"Preparing\", channel: \"Website\" },\n      { orderNumber: \"ORD-007\", customerId: \"C007\", customerName: \"Tom Anderson\", customerEmail: \"tom@example.com\", productName: \"Fitness Tracker\", quantity: 2, amount: \"398.00\", status: \"Shipping\", channel: \"eBay\" },\n      { orderNumber: \"ORD-008\", customerId: \"C008\", customerName: \"Anna Clark\", customerEmail: \"anna@example.com\", productName: \"Digital Camera\", quantity: 1, amount: \"699.99\", status: \"Delivered\", channel: \"Website\" },\n    ];\n\n    await db.insert(orders).values(ordersData);\n\n    // Seed inventory data\n    const inventoryData = [\n      { sku: \"SW-001\", productName: \"Smart Watch Pro\", currentStock: 5, minStock: 10, maxStock: 100, unitPrice: \"299.99\", category: \"Electronics\" },\n      { sku: \"WH-002\", productName: \"Wireless Headphones\", currentStock: 25, minStock: 15, maxStock: 80, unitPrice: \"199.99\", category: \"Electronics\" },\n      { sku: \"GL-003\", productName: \"Gaming Laptop\", currentStock: 3, minStock: 5, maxStock: 20, unitPrice: \"1299.99\", category: \"Computers\" },\n      { sku: \"SP-004\", productName: \"Smartphone\", currentStock: 8, minStock: 10, maxStock: 50, unitPrice: \"899.99\", category: \"Electronics\" },\n      { sku: \"TB-005\", productName: \"Tablet\", currentStock: 15, minStock: 8, maxStock: 40, unitPrice: \"499.99\", category: \"Electronics\" },\n      { sku: \"BS-006\", productName: \"Bluetooth Speaker\", currentStock: 2, minStock: 12, maxStock: 60, unitPrice: \"59.99\", category: \"Audio\" },\n      { sku: \"FT-007\", productName: \"Fitness Tracker\", currentStock: 20, minStock: 8, maxStock: 35, unitPrice: \"199.00\", category: \"Wearables\" },\n      { sku: \"DC-008\", productName: \"Digital Camera\", currentStock: 7, minStock: 6, maxStock: 25, unitPrice: \"699.99\", category: \"Photography\" },\n    ];\n\n    await db.insert(inventory).values(inventoryData);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n\n// Initialize data on startup\nstorage.seedData().catch(console.error);\n","size_bytes":13117},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const dashboardMetrics = pgTable(\"dashboard_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  section: varchar(\"section\", { length: 50 }).notNull(),\n  metricName: varchar(\"metric_name\", { length: 100 }).notNull(),\n  value: text(\"value\").notNull(),\n  change: text(\"change\"),\n  period: varchar(\"period\", { length: 50 }).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const chartData = pgTable(\"chart_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chartId: varchar(\"chart_id\", { length: 100 }).notNull(),\n  section: varchar(\"section\", { length: 50 }).notNull(),\n  data: jsonb(\"data\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: varchar(\"order_number\", { length: 50 }).notNull().unique(),\n  customerId: varchar(\"customer_id\").notNull(),\n  customerName: varchar(\"customer_name\", { length: 100 }).notNull(),\n  customerEmail: varchar(\"customer_email\", { length: 100 }).notNull(),\n  productName: varchar(\"product_name\", { length: 200 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull(),\n  channel: varchar(\"channel\", { length: 50 }).notNull(),\n  orderDate: timestamp(\"order_date\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const inventory = pgTable(\"inventory\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sku: varchar(\"sku\", { length: 100 }).notNull().unique(),\n  productName: varchar(\"product_name\", { length: 200 }).notNull(),\n  currentStock: integer(\"current_stock\").notNull(),\n  minStock: integer(\"min_stock\").notNull(),\n  maxStock: integer(\"max_stock\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertDashboardMetricsSchema = createInsertSchema(dashboardMetrics).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertChartDataSchema = createInsertSchema(chartData).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertInventorySchema = createInsertSchema(inventory).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type DashboardMetric = typeof dashboardMetrics.$inferSelect;\nexport type InsertDashboardMetric = z.infer<typeof insertDashboardMetricsSchema>;\nexport type ChartData = typeof chartData.$inferSelect;\nexport type InsertChartData = z.infer<typeof insertChartDataSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Inventory = typeof inventory.$inferSelect;\nexport type InsertInventory = z.infer<typeof insertInventorySchema>;\n","size_bytes":3655},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport DashboardLayout from \"@/components/dashboard-layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Ecommerce from \"@/pages/ecommerce\";\nimport EcommerceOrders from \"@/pages/ecommerce/orders\";\nimport EcommerceSkuAnalytics from \"@/pages/ecommerce/sku-analytics\";\nimport EcommercePackaging from \"@/pages/ecommerce/packaging\";\nimport EcommerceInventory from \"@/pages/ecommerce/inventory\";\nimport EcommerceProcurement from \"@/pages/ecommerce/procurement\";\nimport AdvertisingHub from \"@/pages/advertising-hub\";\nimport AdvertisingPerformance from \"@/pages/advertising-performance\";\nimport AdvertisingCampaigns from \"@/pages/advertising-campaigns\";\nimport AdvertisingChannels from \"@/pages/advertising-channels\";\nimport AdvertisingKeywords from \"@/pages/advertising-keywords\";\nimport AdvertisingReports from \"@/pages/advertising-reports\";\nimport MarketingHub from \"@/pages/marketing-hub\";\nimport MarketingPositioning from \"@/pages/marketing-positioning\";\nimport MarketingPricing from \"@/pages/marketing-pricing\";\nimport MarketingIntelligence from \"@/pages/marketing-intelligence\";\nimport MarketingStrategy from \"@/pages/marketing-strategy\";\nimport CashFlow from \"@/pages/cash-flow\";\nimport CustomerService from \"@/pages/customer-service\";\nimport CustomerServicePerformance from \"@/pages/customer-service-performance\";\nimport CustomerServiceBehavior from \"@/pages/customer-service-behavior\";\nimport CustomerServiceLifecycle from \"@/pages/customer-service-lifecycle\";\nimport CustomerServiceImpact from \"@/pages/customer-service-impact\";\nimport Growth from \"@/pages/growth\";\nimport GrowthForecast from \"@/pages/growth-forecast\";\nimport GrowthEvents from \"@/pages/growth-events\";\nimport GrowthIntelligence from \"@/pages/growth-intelligence\";\nimport GrowthMotivation from \"@/pages/growth-motivation\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <DashboardLayout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/ecommerce\" component={Ecommerce} />\n        <Route path=\"/ecommerce/orders\" component={EcommerceOrders} />\n        <Route path=\"/ecommerce/sku-analytics\" component={EcommerceSkuAnalytics} />\n        <Route path=\"/ecommerce/packaging\" component={EcommercePackaging} />\n        <Route path=\"/ecommerce/inventory\" component={EcommerceInventory} />\n        <Route path=\"/ecommerce/procurement\" component={EcommerceProcurement} />\n        <Route path=\"/advertising\" component={AdvertisingHub} />\n        <Route path=\"/advertising/performance\" component={AdvertisingPerformance} />\n        <Route path=\"/advertising/campaigns\" component={AdvertisingCampaigns} />\n        <Route path=\"/advertising/channels\" component={AdvertisingChannels} />\n        <Route path=\"/advertising/keywords\" component={AdvertisingKeywords} />\n        <Route path=\"/advertising/reports\" component={AdvertisingReports} />\n        <Route path=\"/marketing\" component={MarketingHub} />\n        <Route path=\"/marketing/positioning\" component={MarketingPositioning} />\n        <Route path=\"/marketing/pricing\" component={MarketingPricing} />\n        <Route path=\"/marketing/intelligence\" component={MarketingIntelligence} />\n        <Route path=\"/marketing/strategy\" component={MarketingStrategy} />\n        <Route path=\"/cash-flow\" component={CashFlow} />\n        <Route path=\"/customer-service\" component={CustomerService} />\n        <Route path=\"/customer-service/performance\" component={CustomerServicePerformance} />\n        <Route path=\"/customer-service/behavior\" component={CustomerServiceBehavior} />\n        <Route path=\"/customer-service/lifecycle\" component={CustomerServiceLifecycle} />\n        <Route path=\"/customer-service/impact\" component={CustomerServiceImpact} />\n        <Route path=\"/growth\" component={Growth} />\n        <Route path=\"/growth/forecast\" component={GrowthForecast} />\n        <Route path=\"/growth/events\" component={GrowthEvents} />\n        <Route path=\"/growth/intelligence\" component={GrowthIntelligence} />\n        <Route path=\"/growth/motivation\" component={GrowthMotivation} />\n        <Route component={NotFound} />\n      </Switch>\n    </DashboardLayout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4744},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 5%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 5%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 5%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(210 40% 98%);\n  --secondary: hsl(210 40% 96%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 47% 11%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 84% 5%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 47% 11%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(222 47% 11%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(222 47% 11%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 84% 5%);\n  --secondary: hsl(215 25% 27%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(215 28% 17%);\n  --muted-foreground: hsl(217 10% 64%);\n  --accent: hsl(215 28% 17%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 63% 31%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(215 28% 17%);\n  --input: hsl(215 28% 17%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(222 47% 11%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(210 40% 98%);\n  --sidebar-accent: hsl(215 28% 17%);\n  --sidebar-accent-foreground: hsl(210 40% 98%);\n  --sidebar-border: hsl(215 28% 17%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.sidebar-transition {\n  transition: transform 0.3s ease-in-out;\n}\n\n@media (max-width: 768px) {\n  .sidebar-hidden {\n    transform: translateX(-100%) !important;\n    pointer-events: none !important;\n  }\n  \n  .sidebar-hidden * {\n    pointer-events: none !important;\n  }\n}\n","size_bytes":3084},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chart-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ChartCardProps {\n  title: string;\n  children: React.ReactNode;\n  hasFilter?: boolean;\n  filterOptions?: string[];\n  className?: string;\n  testId?: string;\n}\n\nexport function ChartCard({\n  title,\n  children,\n  hasFilter = false,\n  filterOptions = [\"Last 30 days\", \"Last 90 days\", \"Last year\"],\n  className = \"\",\n  testId\n}: ChartCardProps) {\n  return (\n    <Card className={className} data-testid={testId}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-foreground\" data-testid={`text-${testId}-title`}>\n            {title}\n          </CardTitle>\n          {hasFilter && (\n            <Select defaultValue={filterOptions[0]} data-testid={`select-${testId}-filter`}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {filterOptions.map((option) => (\n                  <SelectItem key={option} value={option}>\n                    {option}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {children}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1461},"client/src/components/dashboard-layout.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useTheme } from \"./theme-provider\";\nimport {\n  Home,\n  ShoppingCart,\n  Megaphone,\n  Headphones,\n  Users,\n  BarChart,\n  Menu,\n  X,\n  Moon,\n  Sun,\n  Bell,\n  Settings,\n  MoreHorizontal,\n  Wallet,\n  Target,\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"CEO 대시보드\", href: \"/\", icon: Home },\n  { name: \"이커머스 관리\", href: \"/ecommerce\", icon: ShoppingCart },\n  { name: \"광고 퍼포먼스\", href: \"/advertising\", icon: Megaphone },\n  { name: \"마케팅 허브\", href: \"/marketing\", icon: Target },\n  { name: \"현금 흐름\", href: \"/cash-flow\", icon: Wallet },\n  { name: \"고객 인텔리전스\", href: \"/customer-service\", icon: Headphones },\n  { name: \"성장 리포트\", href: \"/growth\", icon: BarChart },\n];\n\nconst sectionTitles: Record<string, { title: string; subtitle: string }> = {\n  \"/\": {\n    title: \"CEO 대시보드\",\n    subtitle: \"실시간 비즈니스 인사이트 및 지표\",\n  },\n  \"/ecommerce\": {\n    title: \"이커머스 관리\",\n    subtitle: \"주문, SKU, 재고 및 발주 관리\",\n  },\n  \"/advertising\": {\n    title: \"광고 퍼포먼스\",\n    subtitle: \"캠페인 지표 및 ROI 분석\",\n  },\n  \"/marketing\": {\n    title: \"마케팅 허브\",\n    subtitle: \"경쟁 포지셔닝 및 시장 인텔리전스\",\n  },\n  \"/cash-flow\": { title: \"현금 흐름\", subtitle: \"현금 예측 및 거래 모니터링\" },\n  \"/customer-service\": {\n    title: \"고객 인텔리전스\",\n    subtitle:\n      \"CS 만족도 트렌드 및 응답 시간 지표, 고객 문의 히트맵, 생애주기 퍼널, 자동 응답 제안\",\n  },\n  \"/growth\": {\n    title: \"성장 리포트\",\n    subtitle:\n      \"날씨 조정 예측, 이벤트 캘린더, 뉴스 피드, 일일 운세 및 예측 인텔리전스\",\n  },\n};\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n\n  // Close sidebar when window is resized to mobile\n  useEffect(() => {\n    const handleResize = () => {\n      if (window.innerWidth < 768) {\n        setSidebarOpen(false);\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize(); // Check initial size\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  const currentSection = sectionTitles[location] || sectionTitles[\"/\"];\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background text-foreground\">\n      {/* Sidebar */}\n      <aside\n        className={`fixed inset-y-0 left-0 z-50 w-72 bg-sidebar border-r border-sidebar-border sidebar-transition md:relative md:translate-x-0 md:z-0 ${\n          sidebarOpen ? \"\" : \"sidebar-hidden\"\n        }`}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Logo and Company Name */}\n          <div className=\"flex items-center justify-between px-6 py-6 border-b border-sidebar-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-sidebar-primary rounded-lg flex items-center justify-center\">\n                <BarChart className=\"w-4 h-4 text-sidebar-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold text-sidebar-foreground\">\n                  ExecDash\n                </h1>\n                <p className=\"text-xs text-muted-foreground\">Executive Suite</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden\"\n              onClick={() => setSidebarOpen(false)}\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Navigation Menu */}\n          <nav className=\"flex-1 px-4 py-6 space-y-2\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              const Icon = item.icon;\n\n              return (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`flex items-center px-4 py-3 rounded-lg transition-colors ${\n                    isActive\n                      ? \"bg-sidebar-accent text-sidebar-accent-foreground\"\n                      : \"text-muted-foreground hover:text-sidebar-foreground hover:bg-sidebar-accent/50\"\n                  }`}\n                  data-testid={`link-nav-${item.name.toLowerCase().replace(/\\s+/g, \"-\")}`}\n                  onClick={() => setSidebarOpen(false)}\n                >\n                  <Icon className=\"w-5 h-5 mr-3\" />\n                  <span>{item.name}</span>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Profile */}\n          <div className=\"px-4 py-4 border-t border-sidebar-border\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-10 w-10\">\n                <AvatarImage\n                  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=150&h=150\"\n                  alt=\"Executive Profile\"\n                />\n                <AvatarFallback>SJ</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <p\n                  className=\"text-sm font-medium text-sidebar-foreground\"\n                  data-testid=\"text-user-name\"\n                >\n                  Sarah Johnson\n                </p>\n                <p\n                  className=\"text-xs text-muted-foreground\"\n                  data-testid=\"text-user-role\"\n                >\n                  Chief Executive Officer\n                </p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-muted-foreground hover:text-sidebar-foreground\"\n              >\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"md:hidden\"\n                onClick={() => setSidebarOpen(true)}\n                data-testid=\"button-toggle-sidebar\"\n              >\n                <Menu className=\"h-4 w-4\" />\n              </Button>\n              <div>\n                <h2\n                  className=\"text-xl font-semibold text-foreground\"\n                  data-testid=\"text-page-title\"\n                >\n                  {currentSection.title}\n                </h2>\n                <p\n                  className=\"text-sm text-muted-foreground\"\n                  data-testid=\"text-page-subtitle\"\n                >\n                  {currentSection.subtitle}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {/* Dark Mode Toggle */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"light\" ? (\n                  <Moon className=\"h-4 w-4\" />\n                ) : (\n                  <Sun className=\"h-4 w-4\" />\n                )}\n              </Button>\n              {/* Notifications */}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"relative\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"h-4 w-4\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-destructive rounded-full\"></span>\n              </Button>\n              {/* Settings */}\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-settings\">\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-6\">{children}</main>\n      </div>\n\n      {/* Mobile overlay */}\n      {sidebarOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"overlay-mobile-sidebar\"\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":9081},"client/src/components/kpi-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { TrendingUp, TrendingDown } from \"lucide-react\";\n\ninterface KPICardProps {\n  title: string;\n  value: string;\n  change?: string;\n  icon: React.ReactNode;\n  iconBgColor?: string;\n  progress?: number;\n  progressColor?: string;\n  testId?: string;\n}\n\nexport function KPICard({\n  title,\n  value,\n  change,\n  icon,\n  iconBgColor = \"bg-primary/10\",\n  progress,\n  progressColor = \"bg-primary\",\n  testId\n}: KPICardProps) {\n  const isPositive = change && change.startsWith(\"+\");\n  const isNegative = change && change.startsWith(\"-\");\n\n  return (\n    <Card data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-10 h-10 ${iconBgColor} rounded-lg flex items-center justify-center`}>\n              {icon}\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-${testId}-title`}>{title}</p>\n              <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-${testId}-value`}>{value}</p>\n            </div>\n          </div>\n          {change && (\n            <div className={`flex items-center text-sm ${\n              isPositive ? \"text-green-500\" : isNegative ? \"text-red-500\" : \"text-muted-foreground\"\n            }`} data-testid={`text-${testId}-change`}>\n              {isPositive && <TrendingUp className=\"w-4 h-4 mr-1\" />}\n              {isNegative && <TrendingDown className=\"w-4 h-4 mr-1\" />}\n              <span>{change}</span>\n            </div>\n          )}\n        </div>\n        {progress !== undefined && (\n          <div className=\"w-full bg-muted rounded-full h-2\">\n            <div className={`${progressColor} h-2 rounded-full`} style={{ width: `${progress}%` }}></div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1939},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"dashboard-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1604},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customer-analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { KPICard } from \"@/components/kpi-card\";\nimport { ChartCard } from \"@/components/chart-card\";\nimport { InteractiveChart } from \"@/components/interactive-chart\";\nimport { UserPlus, RotateCcw, PieChart, Heart } from \"lucide-react\";\n\n\nexport default function CustomerAnalytics() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/metrics/customer-analytics\"]\n  });\n\n  // Sample customer analytics chart data\n  const acquisitionData = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [{\n      label: 'New Customers',\n      data: [1247, 1580, 1320, 1890, 2100, 1950],\n      borderColor: 'rgba(59, 130, 246, 1)',\n      backgroundColor: 'rgba(59, 130, 246, 0.1)',\n      fill: true\n    }]\n  };\n\n  const segmentsData = {\n    labels: ['Premium', 'Standard', 'Basic', 'Trial'],\n    datasets: [{\n      data: [35, 45, 15, 5],\n      backgroundColor: [\n        'rgba(245, 158, 11, 0.8)',\n        'rgba(59, 130, 246, 0.8)',\n        'rgba(16, 185, 129, 0.8)',\n        'rgba(156, 163, 175, 0.8)'\n      ]\n    }]\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-card rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getMetricValue = (name: string) => {\n    return Array.isArray(metrics) ? metrics.find((m: any) => m.metricName === name) || {} : {};\n  };\n\n  const newCustomers = getMetricValue(\"newCustomers\");\n  const customerRetention = getMetricValue(\"customerRetention\");\n  const avgOrderValue = getMetricValue(\"avgOrderValue\");\n  const customerLifetimeValue = getMetricValue(\"customerLifetimeValue\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        <KPICard\n          title=\"New Customers\"\n          value={newCustomers.value || \"1,247\"}\n          change={newCustomers.change}\n          icon={<UserPlus className=\"w-5 h-5 text-blue-500\" />}\n          iconBgColor=\"bg-blue-500/10\"\n          testId=\"kpi-new-customers\"\n        />\n        \n        <KPICard\n          title=\"Customer Retention\"\n          value={customerRetention.value || \"87.3%\"}\n          change={customerRetention.change}\n          icon={<RotateCcw className=\"w-5 h-5 text-green-500\" />}\n          iconBgColor=\"bg-green-500/10\"\n          testId=\"kpi-customer-retention\"\n        />\n        \n        <KPICard\n          title=\"Avg Order Value\"\n          value={avgOrderValue.value || \"$187\"}\n          change={avgOrderValue.change}\n          icon={<PieChart className=\"w-5 h-5 text-amber-500\" />}\n          iconBgColor=\"bg-amber-500/10\"\n          testId=\"kpi-avg-order-value\"\n        />\n        \n        <KPICard\n          title=\"Customer Lifetime Value\"\n          value={customerLifetimeValue.value || \"$2,347\"}\n          change={customerLifetimeValue.change}\n          icon={<Heart className=\"w-5 h-5 text-purple-500\" />}\n          iconBgColor=\"bg-purple-500/10\"\n          testId=\"kpi-customer-lifetime-value\"\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <ChartCard\n          title=\"Customer Acquisition\"\n          hasFilter={true}\n          testId=\"chart-customer-acquisition\"\n        >\n          <InteractiveChart\n            type=\"line\"\n            data={acquisitionData}\n            testId=\"chart-customer-acquisition\"\n          />\n        </ChartCard>\n        \n        <ChartCard\n          title=\"Customer Segments\"\n          testId=\"chart-customer-segments\"\n        >\n          <InteractiveChart\n            type=\"doughnut\"\n            data={segmentsData}\n            testId=\"chart-customer-segments\"\n          />\n        </ChartCard>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3899},"client/src/pages/customer-service.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { KPICard } from \"@/components/kpi-card\";\nimport { ChartCard } from \"@/components/chart-card\";\nimport { InteractiveChart } from \"@/components/interactive-chart\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { Smile, Clock, Ticket, CheckCircle, Phone, Users, RotateCcw, DollarSign, ArrowRight } from \"lucide-react\";\n\nexport default function CustomerService() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/metrics/customer-service\"]\n  });\n\n  // Sample customer service chart data\n  const ticketVolumeData = {\n    labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n    datasets: [{\n      label: 'Tickets Created',\n      data: [65, 85, 92, 78, 95, 45, 32],\n      backgroundColor: 'rgba(59, 130, 246, 0.8)',\n      borderColor: 'rgba(59, 130, 246, 1)',\n      borderWidth: 2\n    }, {\n      label: 'Tickets Resolved',\n      data: [58, 78, 88, 82, 89, 48, 35],\n      backgroundColor: 'rgba(16, 185, 129, 0.8)',\n      borderColor: 'rgba(16, 185, 129, 1)',\n      borderWidth: 2\n    }]\n  };\n\n  const issueCategoriesData = {\n    labels: ['Technical', 'Billing', 'Account', 'Product', 'General'],\n    datasets: [{\n      data: [35, 25, 20, 15, 5],\n      backgroundColor: [\n        'rgba(239, 68, 68, 0.8)',\n        'rgba(245, 158, 11, 0.8)',\n        'rgba(59, 130, 246, 0.8)',\n        'rgba(16, 185, 129, 0.8)',\n        'rgba(139, 92, 246, 0.8)'\n      ]\n    }]\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-card rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getMetricValue = (name: string) => {\n    return Array.isArray(metrics) ? metrics.find((m: any) => m.metricName === name) || {} : {};\n  };\n\n  const customerSatisfaction = getMetricValue(\"customerSatisfaction\");\n  const avgResponseTime = getMetricValue(\"avgResponseTime\");\n  const openTickets = getMetricValue(\"openTickets\");\n  const resolutionRate = getMetricValue(\"resolutionRate\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Customer Intelligence Hub Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-service-performance\">\n          <Link href=\"/customer-service/performance\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n                  <Phone className=\"w-5 h-5 text-blue-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">서비스 성과</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📞 4.2/5 만족도</p>\n                <p>⏱️ 4.2시간 평균 응답</p>\n                <p>✅ 78% 해결률</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-blue-600 hover:text-blue-700\" data-testid=\"button-view-performance\">\n                성과 보기 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-customer-behavior\">\n          <Link href=\"/customer-service/behavior\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-green-500/10 rounded-lg\">\n                  <Users className=\"w-5 h-5 text-green-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">고객 행동</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>👥 인구통계별 분석</p>\n                <p>⏰ 시간별 문의 패턴</p>\n                <p>📊 주제별 분포</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-green-600 hover:text-green-700\" data-testid=\"button-view-behavior\">\n                행동 분석 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-customer-lifecycle\">\n          <Link href=\"/customer-service/lifecycle\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-purple-500/10 rounded-lg\">\n                  <RotateCcw className=\"w-5 h-5 text-purple-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">고객 생애주기</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>🔄 신규 고객 분석</p>\n                <p>🔁 재구매자 패턴</p>\n                <p>📈 제품별 재구매율</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-purple-600 hover:text-purple-700\" data-testid=\"button-view-lifecycle\">\n                생애주기 추적 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-business-impact\">\n          <Link href=\"/customer-service/impact\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-amber-500/10 rounded-lg\">\n                  <DollarSign className=\"w-5 h-5 text-amber-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">비즈니스 임팩트</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>💰 평균 객단가 분석</p>\n                <p>📊 고객 생애가치</p>\n                <p>📈 비즈니스 지표</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-amber-600 hover:text-amber-700\" data-testid=\"button-view-impact\">\n                임팩트 보기 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        <KPICard\n          title=\"Customer Satisfaction\"\n          value={customerSatisfaction.value || \"4.8/5\"}\n          change={customerSatisfaction.change}\n          icon={<Smile className=\"w-5 h-5 text-green-500\" />}\n          iconBgColor=\"bg-green-500/10\"\n          testId=\"kpi-customer-satisfaction\"\n        />\n        \n        <KPICard\n          title=\"Avg Response Time\"\n          value={avgResponseTime.value || \"2.3h\"}\n          change={avgResponseTime.change}\n          icon={<Clock className=\"w-5 h-5 text-blue-500\" />}\n          iconBgColor=\"bg-blue-500/10\"\n          testId=\"kpi-avg-response-time\"\n        />\n        \n        <KPICard\n          title=\"Open Tickets\"\n          value={openTickets.value || \"127\"}\n          change={openTickets.change}\n          icon={<Ticket className=\"w-5 h-5 text-amber-500\" />}\n          iconBgColor=\"bg-amber-500/10\"\n          testId=\"kpi-open-tickets\"\n        />\n        \n        <KPICard\n          title=\"Resolution Rate\"\n          value={resolutionRate.value || \"94.2%\"}\n          change={resolutionRate.change}\n          icon={<CheckCircle className=\"w-5 h-5 text-purple-500\" />}\n          iconBgColor=\"bg-purple-500/10\"\n          testId=\"kpi-resolution-rate\"\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <ChartCard\n          title=\"Ticket Volume\"\n          hasFilter={true}\n          testId=\"chart-ticket-volume\"\n        >\n          <InteractiveChart\n            type=\"bar\"\n            data={ticketVolumeData}\n            testId=\"chart-ticket-volume\"\n          />\n        </ChartCard>\n        \n        <ChartCard\n          title=\"Issue Categories\"\n          testId=\"chart-issue-categories\"\n        >\n          <InteractiveChart\n            type=\"pie\"\n            data={issueCategoriesData}\n            testId=\"chart-issue-categories\"\n          />\n        </ChartCard>\n      </div>\n    </div>\n  );\n}","size_bytes":8979},"client/src/pages/dashboard.tsx":{"content":"// src/pages/dashboard.tsx\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  AlertCircle,\n  Banknote,\n  ShoppingCart,\n  Megaphone,\n  Target,\n  Users,\n  Sun,\n} from \"lucide-react\";\n\n// 1. 긴급 알림 구역 (Emergency Alerts)\nconst EmergencyAlerts = () => (\n  <div className=\"bg-yellow-900/30 border-l-4 border-yellow-500 text-yellow-200 p-4 rounded-md mb-8\">\n    <div className=\"flex items-center mb-2\">\n      <AlertCircle className=\"h-5 w-5 mr-3\" />\n      <h3 className=\"font-bold\">🔥 긴급 알림 (Urgent Alerts)</h3>\n    </div>\n    <ul className=\"list-disc list-inside text-sm space-y-1\">\n      <li>이커머스: 8개 원자재가 발주 임계치 이하</li>\n      <li>광고: 페이스북 ROAS 180%로 하락 (목표: 300%+)</li>\n      <li>현금흐름: 경고 - 운영비 18일분만 남음</li>\n      <li>고객 인텔리전스: CS 응답시간: 28시간 (SLA: 24시간)</li>\n    </ul>\n  </div>\n);\n\n// 2. 허브 요약 카드 (Hub Summary)\nconst HubSummaryCards = () => (\n  <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n    {/* 이커머스 개요 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">이커머스 개요</CardTitle>\n        <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>주문: 47개 신규, 234개 배송중 | 94% 처리율</p>\n        <p>포장: 87% 효율성, 234개 박스 필요</p>\n        <p className=\"text-red-500 font-bold\">발주: 8개 원자재 재주문 필요</p>\n      </CardContent>\n    </Card>\n\n    {/* 광고 성과 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">광고 성과</CardTitle>\n        <Megaphone className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>총 지출: 이번 달 ₩8.4M | 예산의 85%</p>\n        <p>전체 ROAS: 340% | 구글 420%</p>\n        <p className=\"text-red-500 font-bold\">페이스북 ROAS 180% (목표 미달)</p>\n      </CardContent>\n    </Card>\n\n    {/* 마케팅 인텔리전스 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">마케팅 인텔리전스</CardTitle>\n        <Target className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>포지셔닝: 프리미엄 플레이어</p>\n        <p>시장 점유율: 8.2% (+0.4%)</p>\n        <p>경쟁사 활동: 3개 신제품 출시 감지</p>\n      </CardContent>\n    </Card>\n\n    {/* 현금흐름 상태 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">현금흐름 상태</CardTitle>\n        <Banknote className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>현재 잔액: ₩180M | 가용: ₩165M</p>\n        <p>월 소진율: ₩45M | 4.0개월 런웨이</p>\n        <p>예측: 다음 달 ₩45M 예상</p>\n      </CardContent>\n    </Card>\n\n    {/* 고객 인텔리전스 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">고객 인텔리전스</CardTitle>\n        <Users className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>신규 고객: 이번 달 1,247명 | 73% 재구매율</p>\n        <p>서비스 성과: 4.2/5 만족도, 78% 해결률</p>\n        <p>AOV ₩87.5k, CLV ₩340k</p>\n      </CardContent>\n    </Card>\n\n    {/* 성장 전망 */}\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">성장 전망</CardTitle>\n        <Sun className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent className=\"text-xs space-y-1\">\n        <p>날씨 영향: 내일 비 → -15% 주문 예측</p>\n        <p>시장 이벤트: 이번 달 2개 박람회</p>\n        <p className=\"text-yellow-400\">오늘의 운세: 큰 기회가 기다립니다! 🌟</p>\n      </CardContent>\n    </Card>\n  </div>\n);\n\n// 3. 경영진 액션 센터 (Action Center)\nconst ActionCenter = () => (\n  <div className=\"mt-8\">\n    <h3 className=\"text-lg font-bold mb-4\">\n      ⚡ 경영진 액션 센터 (Decision Required)\n    </h3>\n    <div className=\"space-y-3\">\n      <div className=\"bg-red-900/30 p-3 rounded-md flex justify-between items-center\">\n        <p className=\"text-sm\">🔴 높음: ₩15M 재고 + ₩7.8M 발주 주문 승인</p>\n        <button className=\"bg-red-500 text-white text-xs px-3 py-1 rounded\">\n          검토\n        </button>\n      </div>\n      <div className=\"bg-yellow-900/30 p-3 rounded-md flex justify-between items-center\">\n        <p className=\"text-sm\">🟡 보통: 페이스북 캠페인 최적화 제안 검토</p>\n        <button className=\"bg-yellow-500 text-black text-xs px-3 py-1 rounded\">\n          보기\n        </button>\n      </div>\n      <div className=\"bg-yellow-900/30 p-3 rounded-md flex justify-between items-center\">\n        <p className=\"text-sm\">🟡 보통: 연말 성수기 CS 인력 충원 대응</p>\n        <button className=\"bg-yellow-500 text-black text-xs px-3 py-1 rounded\">\n          계획\n        </button>\n      </div>\n      <div className=\"bg-gray-700 p-3 rounded-md\">\n        <p className=\"text-sm\">📊 주간 목표: ₩12M 매출 목표 (₩8.4M 달성)</p>\n        <div className=\"w-full bg-gray-600 rounded-full h-2.5 mt-2\">\n          <div\n            className=\"bg-blue-500 h-2.5 rounded-full\"\n            style={{ width: \"70%\" }}\n          ></div>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\n// 최종 대시보드 화면 조립\nfunction Dashboard() {\n  return (\n    <div className=\"space-y-8\">\n      {/* 긴급 알림 */}\n      <EmergencyAlerts />\n\n      {/* 허브 요약 */}\n      <h3 className=\"text-lg font-bold\">📊 허브 요약 (Hub Summary)</h3>\n      <HubSummaryCards />\n\n      {/* 통합 분석 차트 (지금은 간단한 Placeholder로 대체합니다) */}\n      <div className=\"mt-8\">\n        <h3 className=\"text-lg font-bold mb-4\">\n          📈 통합 분석 (Integrated Analysis)\n        </h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm font-medium\">\n                매출 vs 마케팅 ROI\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"h-48 flex items-center justify-center text-sm text-gray-500\">\n              차트 준비 중\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm font-medium\">\n                현금흐름 vs 발주 필요량\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"h-48 flex items-center justify-center text-sm text-gray-500\">\n              차트 준비 중\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-sm font-medium\">\n                고객 만족도 vs 성장\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"h-48 flex items-center justify-center text-sm text-gray-500\">\n              차트 준비 중\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* 액션 센터 */}\n      <ActionCenter />\n    </div>\n  );\n}\n\nexport default Dashboard;\n","size_bytes":7827},"client/src/pages/ecommerce.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Package, Tag, Ruler, BarChart3, ShoppingCart, Clock, AlertTriangle, TrendingUp } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Ecommerce() {\n  const hubCards = [\n    {\n      title: \"주문 관리\",\n      href: \"/ecommerce/orders\",\n      icon: Package,\n      emoji: \"📦\",\n      stats: [\"47개 신규\", \"156개 준비중\", \"234개 배송중\"],\n      actionText: \"주문 보기\"\n    },\n    {\n      title: \"SKU 분석\",\n      href: \"/ecommerce/sku-analytics\",\n      icon: Tag,\n      emoji: \"🏷️\",\n      stats: [\"156개 SKU\", \"오늘 2,847개 유닛\"],\n      actionText: \"SKU 분석\"\n    },\n    {\n      title: \"포장 최적화\",\n      href: \"/ecommerce/packaging\",\n      icon: Ruler,\n      emoji: \"📏\",\n      stats: [\"87% 효율성\", \"234개 박스 필요\"],\n      actionText: \"포장 최적화\"\n    },\n    {\n      title: \"재고 관리\",\n      href: \"/ecommerce/inventory\",\n      icon: BarChart3,\n      emoji: \"📊\",\n      stats: [\"12개 낮은 재고 알림\", \"94% 재고 보유\"],\n      actionText: \"재고 관리\"\n    },\n    {\n      title: \"발주 관리\",\n      href: \"/ecommerce/procurement\",\n      icon: ShoppingCart,\n      emoji: \"🛒\",\n      stats: [\"8개 원자재 임계치 이하\", \"3건 발주 대기\"],\n      actionText: \"발주 관리\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hub Cards Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {hubCards.map((card, index) => (\n          <Link key={index} href={card.href}>\n            <Card className=\"cursor-pointer hover:shadow-lg transition-all duration-200 group hover:scale-[1.02]\" data-testid={`card-${card.title.replace(/\\s+/g, '-').toLowerCase()}`}>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-2xl\">{card.emoji}</span>\n                    </div>\n                    <span className=\"text-lg font-semibold text-foreground\">{card.title}</span>\n                  </div>\n                  <ArrowRight className=\"w-5 h-5 text-muted-foreground group-hover:text-primary transition-colors\" />\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {card.stats.map((stat, statIndex) => (\n                    <div key={statIndex} className=\"flex items-center text-sm text-muted-foreground\">\n                      <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                      {stat}\n                    </div>\n                  ))}\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full mt-4 text-primary hover:text-primary justify-start pl-0\"\n                  data-testid={`button-${card.actionText.replace(/\\s+/g, '-').toLowerCase()}`}\n                >\n                  {card.actionText} →\n                </Button>\n              </CardContent>\n            </Card>\n          </Link>\n        ))}\n      </div>\n\n      {/* Overview Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-6\">\n        {/* Daily Orders */}\n        <Card data-testid=\"chart-daily-orders\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <Package className=\"w-4 h-4 mr-2 text-blue-500\" />\n              일일 주문\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-foreground\">437</div>\n              <div className=\"text-sm text-green-500 flex items-center\">\n                <TrendingUp className=\"w-3 h-3 mr-1\" />\n                +12% vs 어제\n              </div>\n              <div className=\"h-16 bg-gradient-to-r from-blue-500/20 to-blue-600/20 rounded-lg flex items-end p-2\">\n                <div className=\"flex items-end space-x-1 w-full\">\n                  {[40, 65, 55, 80, 70, 90, 100].map((height, i) => (\n                    <div\n                      key={i}\n                      className=\"bg-blue-500 rounded-sm flex-1\"\n                      style={{ height: `${height}%` }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Top SKU */}\n        <Card data-testid=\"chart-top-sku\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <Tag className=\"w-4 h-4 mr-2 text-purple-500\" />\n              상위 SKU\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">SKU-001</span>\n                <span className=\"text-sm font-semibold text-foreground\">2,847</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">SKU-024</span>\n                <span className=\"text-sm font-semibold text-foreground\">1,923</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-foreground\">SKU-016</span>\n                <span className=\"text-sm font-semibold text-foreground\">1,456</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                총 156개 SKU 활성\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Packaging Gauge */}\n        <Card data-testid=\"chart-packaging-gauge\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <Ruler className=\"w-4 h-4 mr-2 text-orange-500\" />\n              포장 효율성\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"text-2xl font-bold text-foreground\">87%</div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                <div className=\"bg-orange-500 h-2 rounded-full\" style={{ width: '87%' }}></div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                234개 박스 필요\n              </div>\n              <div className=\"text-xs text-green-500\">\n                +3% vs 지난주\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Procurement Alerts */}\n        <Card data-testid=\"chart-procurement-alerts\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base font-medium flex items-center\">\n              <ShoppingCart className=\"w-4 h-4 mr-2 text-red-500\" />\n              발주 알림\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <AlertTriangle className=\"w-4 h-4 mr-2 text-red-500\" />\n                  <span className=\"text-sm text-foreground\">임계치 이하</span>\n                </div>\n                <span className=\"text-sm font-semibold text-red-500\">8개</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Clock className=\"w-4 h-4 mr-2 text-yellow-500\" />\n                  <span className=\"text-sm text-foreground\">발주 대기</span>\n                </div>\n                <span className=\"text-sm font-semibold text-yellow-500\">3건</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-2\">\n                총 47개 원자재 추적 중\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quick Stats Row */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card data-testid=\"stat-total-orders\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">1,437</div>\n              <div className=\"text-sm text-muted-foreground\">총 주문</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-revenue\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">₩4.2M</div>\n              <div className=\"text-sm text-muted-foreground\">이번 달 매출</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-avg-processing\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">2.3h</div>\n              <div className=\"text-sm text-muted-foreground\">평균 처리시간</div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card data-testid=\"stat-fulfillment-rate\">\n          <CardContent className=\"p-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">94%</div>\n              <div className=\"text-sm text-muted-foreground\">배송 성공률</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9992},"client/src/pages/growth.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { KPICard } from \"@/components/kpi-card\";\nimport { ChartCard } from \"@/components/chart-card\";\nimport { InteractiveChart } from \"@/components/interactive-chart\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { TrendingUp, Globe, Rocket, CloudRain, Calendar, Newspaper, Star, ArrowRight } from \"lucide-react\";\n\nexport default function Growth() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/metrics/growth\"]\n  });\n\n  // Sample growth chart data\n  const growthData = {\n    labels: ['Q1 2023', 'Q2 2023', 'Q3 2023', 'Q4 2023', 'Q1 2024', 'Q2 2024'],\n    datasets: [{\n      label: 'Revenue Growth (%)',\n      data: [15.2, 18.7, 22.1, 28.4, 32.6, 35.9],\n      borderColor: 'rgba(16, 185, 129, 1)',\n      backgroundColor: 'rgba(16, 185, 129, 0.1)',\n      fill: true,\n      tension: 0.4\n    }, {\n      label: 'User Growth (%)',\n      data: [12.8, 16.3, 19.9, 25.1, 29.7, 33.2],\n      borderColor: 'rgba(59, 130, 246, 1)',\n      backgroundColor: 'rgba(59, 130, 246, 0.1)',\n      fill: true,\n      tension: 0.4\n    }, {\n      label: 'Market Share (%)',\n      data: [18.5, 19.2, 20.8, 22.3, 23.1, 23.7],\n      borderColor: 'rgba(245, 158, 11, 1)',\n      backgroundColor: 'rgba(245, 158, 11, 0.1)',\n      fill: true,\n      tension: 0.4\n    }]\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-card rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getMetricValue = (name: string) => {\n    return Array.isArray(metrics) ? metrics.find((m: any) => m.metricName === name) || {} : {};\n  };\n\n  const monthlyGrowthRate = getMetricValue(\"monthlyGrowthRate\");\n  const marketShare = getMetricValue(\"marketShare\");\n  const revenueGrowth = getMetricValue(\"revenueGrowth\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Growth Intelligence Hub Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-weather-forecast\">\n          <Link href=\"/growth/forecast\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-500/10 rounded-lg\">\n                  <CloudRain className=\"w-5 h-5 text-blue-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">날씨 및 예측</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>🌦️ 차주 날씨 영향</p>\n                <p>📈 매출 예측 조정</p>\n                <p>🎯 날씨 기반 분석</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-blue-600 hover:text-blue-700\" data-testid=\"button-view-forecast\">\n                예측 보기 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-market-events\">\n          <Link href=\"/growth/events\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-green-500/10 rounded-lg\">\n                  <Calendar className=\"w-5 h-5 text-green-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">시장 이벤트</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📅 박람회 일정</p>\n                <p>🏪 팝업 이벤트</p>\n                <p>🎪 오프라인 캘린더</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-green-600 hover:text-green-700\" data-testid=\"button-view-events\">\n                이벤트 관리 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-industry-intelligence\">\n          <Link href=\"/growth/intelligence\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-purple-500/10 rounded-lg\">\n                  <Newspaper className=\"w-5 h-5 text-purple-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">산업 인텔리전스</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>📰 업계 업데이트</p>\n                <p>🏢 경쟁사 뉴스</p>\n                <p>📊 시장 트렌드</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-purple-600 hover:text-purple-700\" data-testid=\"button-view-intelligence\">\n                인텔리전스 보기 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n\n        <Card className=\"transition-all duration-200 hover:shadow-lg hover:scale-105 cursor-pointer\" data-testid=\"card-motivation\">\n          <Link href=\"/growth/motivation\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-amber-500/10 rounded-lg\">\n                  <Star className=\"w-5 h-5 text-amber-500\" />\n                </div>\n                <CardTitle className=\"text-lg\">응원 격려</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm text-muted-foreground\">\n                <p>⭐ 오늘의 운세</p>\n                <p>🔮 올해 사주</p>\n                <p>💪 팀 격려 메시지</p>\n              </div>\n              <Button variant=\"ghost\" className=\"w-full mt-4 text-amber-600 hover:text-amber-700\" data-testid=\"button-view-motivation\">\n                응원 보기 <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </CardContent>\n          </Link>\n        </Card>\n      </div>\n\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        <KPICard\n          title=\"Monthly Growth Rate\"\n          value={monthlyGrowthRate.value || \"12.3%\"}\n          change={monthlyGrowthRate.change}\n          icon={<TrendingUp className=\"w-5 h-5 text-green-500\" />}\n          iconBgColor=\"bg-green-500/10\"\n          testId=\"kpi-monthly-growth-rate\"\n        />\n        \n        <KPICard\n          title=\"Market Share\"\n          value={marketShare.value || \"23.7%\"}\n          change={marketShare.change}\n          icon={<Globe className=\"w-5 h-5 text-blue-500\" />}\n          iconBgColor=\"bg-blue-500/10\"\n          testId=\"kpi-market-share\"\n        />\n        \n        <KPICard\n          title=\"Revenue Growth\"\n          value={revenueGrowth.value || \"28.4%\"}\n          change={revenueGrowth.change}\n          icon={<Rocket className=\"w-5 h-5 text-purple-500\" />}\n          iconBgColor=\"bg-purple-500/10\"\n          testId=\"kpi-revenue-growth\"\n        />\n      </div>\n\n      {/* Growth Chart */}\n      <ChartCard\n        title=\"Growth Metrics Overview\"\n        hasFilter={true}\n        filterOptions={[\"Last 6 months\", \"Last year\", \"Last 2 years\"]}\n        testId=\"chart-growth-metrics-overview\"\n      >\n        <InteractiveChart\n          type=\"line\"\n          data={growthData}\n          testId=\"chart-growth-interactive\"\n        />\n      </ChartCard>\n    </div>\n  );\n}","size_bytes":8119},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/interactive-chart.tsx":{"content":"import React, { useEffect, useState, useRef } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  Filler\n} from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n  Filler\n);\n\ninterface InteractiveChartProps {\n  type: 'line' | 'bar' | 'doughnut' | 'pie' | 'scatter';\n  data: any;\n  options?: any;\n  className?: string;\n  testId?: string;\n}\n\nconst defaultOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  interaction: {\n    mode: 'index' as const,\n    intersect: false,\n  },\n  plugins: {\n    legend: {\n      position: 'top' as const,\n      labels: {\n        usePointStyle: true,\n        padding: 20,\n        font: {\n          size: 12,\n          family: 'Inter'\n        },\n        color: '#0f172a'\n      },\n    },\n    tooltip: {\n      backgroundColor: '#ffffff',\n      titleColor: '#0f172a',\n      bodyColor: '#0f172a',\n      borderColor: '#e2e8f0',\n      borderWidth: 1,\n      cornerRadius: 8,\n      padding: 12,\n      titleFont: {\n        size: 14,\n        weight: '600' as const,\n        family: 'Inter'\n      },\n      bodyFont: {\n        size: 13,\n        family: 'Inter'\n      }\n    },\n  },\n  scales: {\n    x: {\n      grid: {\n        color: '#e2e8f0',\n        drawBorder: false,\n      },\n      ticks: {\n        color: '#64748b',\n        font: {\n          size: 12,\n          family: 'Inter'\n        }\n      }\n    },\n    y: {\n      grid: {\n        color: '#e2e8f0',\n        drawBorder: false,\n      },\n      ticks: {\n        color: '#64748b',\n        font: {\n          size: 12,\n          family: 'Inter'\n        }\n      }\n    }\n  }\n};\n\nconst doughnutOptions = {\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    legend: {\n      position: 'bottom' as const,\n      labels: {\n        usePointStyle: true,\n        padding: 20,\n        font: {\n          size: 12,\n          family: 'Inter'\n        },\n        color: '#0f172a'\n      },\n    },\n    tooltip: {\n      backgroundColor: '#ffffff',\n      titleColor: '#0f172a',\n      bodyColor: '#0f172a',\n      borderColor: '#e2e8f0',\n      borderWidth: 1,\n      cornerRadius: 8,\n      padding: 12,\n    },\n  },\n};\n\n// Error boundary component to catch Chart.js errors\ninterface ChartErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\nclass ChartErrorBoundary extends React.Component<\n  { children: React.ReactNode; fallback?: React.ReactNode },\n  ChartErrorBoundaryState\n> {\n  constructor(props: { children: React.ReactNode; fallback?: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ChartErrorBoundaryState {\n    // Check if error is Chart.js related\n    const isChartError = error.message?.includes('ownerDocument') || \n                        error.message?.includes('Chart') ||\n                        error.message?.includes('canvas') ||\n                        error.stack?.includes('chart.js') ||\n                        error.stack?.includes('chartjs');\n    \n    if (isChartError) {\n      return { hasError: true, error };\n    }\n    \n    // Re-throw non-Chart errors to be handled by parent error boundaries\n    throw error;\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Only log Chart.js related errors to avoid noise\n    const isChartError = error.message?.includes('ownerDocument') || \n                        error.message?.includes('Chart') ||\n                        error.message?.includes('canvas') ||\n                        error.stack?.includes('chart.js') ||\n                        error.stack?.includes('chartjs');\n    \n    if (isChartError) {\n      console.warn('Chart.js rendering error:', error, errorInfo);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return this.props.fallback || (\n        <div className=\"flex items-center justify-center h-[300px] text-gray-500\">\n          Chart unavailable\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport function InteractiveChart({ type, data, options, className = '', testId }: InteractiveChartProps) {\n  const chartRef = useRef<ChartJS | null>(null);\n  const [mounted, setMounted] = useState(false);\n  const [chartKey, setChartKey] = useState(0);\n\n  // Force re-render on hot reload\n  useEffect(() => {\n    setMounted(true);\n    return () => {\n      setMounted(false);\n    };\n  }, []);\n\n  // Handle hot module replacement\n  useEffect(() => {\n    if (import.meta.hot) {\n      import.meta.hot.accept(() => {\n        setChartKey(prev => prev + 1);\n      });\n    }\n  }, []);\n\n  const chartOptions = {\n    ...(type === 'doughnut' || type === 'pie' ? doughnutOptions : defaultOptions),\n    ...options,\n  };\n\n  // Apply theme-aware colors to datasets\n  const processedData = {\n    ...data,\n    datasets: data.datasets?.map((dataset: any) => ({\n      ...dataset,\n      backgroundColor: dataset.backgroundColor || [\n        'rgba(59, 130, 246, 0.8)',\n        'rgba(16, 185, 129, 0.8)',\n        'rgba(245, 158, 11, 0.8)',\n        'rgba(239, 68, 68, 0.8)',\n        'rgba(139, 92, 246, 0.8)',\n        'rgba(236, 72, 153, 0.8)',\n        'rgba(34, 197, 94, 0.8)',\n        'rgba(168, 85, 247, 0.8)',\n      ],\n      borderColor: dataset.borderColor || '#e2e8f0',\n      borderWidth: dataset.borderWidth || (type === 'line' ? 2 : 1),\n      fill: dataset.fill !== undefined ? dataset.fill : false,\n      tension: dataset.tension || (type === 'line' ? 0.3 : 0),\n    }))\n  };\n\n  // Generate backward-compatible canvas test ID for actual canvas element\n  const legacyCanvasId = testId ? `canvas-${testId.replace('chart-', '').replace('-interactive', '')}-chart` : undefined;\n\n  // Apply test ID to canvas element after chart is mounted\n  useEffect(() => {\n    if (chartRef.current && legacyCanvasId) {\n      const canvas = chartRef.current.canvas;\n      if (canvas) {\n        canvas.setAttribute('data-testid', legacyCanvasId);\n      }\n    }\n  }, [legacyCanvasId, chartKey]);\n\n  if (!mounted) {\n    return (\n      <div className={`w-full h-[300px] ${className} flex items-center justify-center`} data-testid={testId}>\n        <div className=\"text-gray-500\">Loading chart...</div>\n      </div>\n    );\n  }\n\n  return (\n    <ChartErrorBoundary>\n      <div \n        className={`w-full h-[300px] ${className}`} \n        data-testid={testId}\n      >\n        <Chart\n          key={chartKey}\n          ref={chartRef}\n          type={type}\n          data={processedData}\n          options={chartOptions}\n        />\n      </div>\n    </ChartErrorBoundary>\n  );\n}","size_bytes":6725},"client/src/pages/advertising-campaigns.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Target, Plus } from \"lucide-react\";\n\nexport default function AdvertisingCampaigns() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/advertising\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-campaigns-page-title\">\n              Campaign Management\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-campaigns-description\">\n              Manage and optimize your advertising campaigns\n            </p>\n          </div>\n        </div>\n        <Button data-testid=\"button-create-campaign\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Campaign\n        </Button>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-campaigns-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-red-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Target className=\"w-8 h-8 text-red-500\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-placeholder-title\">\n            Campaign Management Coming Soon\n          </h3>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"text-placeholder-description\">\n            This section will provide comprehensive campaign management tools including creation, editing, performance tracking, and optimization features.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n            <div className=\"text-center\" data-testid=\"feature-campaign-creation\">\n              <div className=\"font-medium\">Campaign Creation</div>\n              <div>Build targeted campaigns</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-performance-tracking\">\n              <div className=\"font-medium\">Performance Tracking</div>\n              <div>Monitor campaign metrics</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-optimization\">\n              <div className=\"font-medium\">Optimization</div>\n              <div>AI-powered suggestions</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2728},"client/src/pages/advertising-channels.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, BarChart3, Settings } from \"lucide-react\";\n\nexport default function AdvertisingChannels() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/advertising\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-channels-page-title\">\n              Channel Analytics\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-channels-description\">\n              Analyze performance across advertising channels\n            </p>\n          </div>\n        </div>\n        <Button data-testid=\"button-channel-settings\">\n          <Settings className=\"w-4 h-4 mr-2\" />\n          Channel Settings\n        </Button>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-channels-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-blue-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <BarChart3 className=\"w-8 h-8 text-blue-500\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-placeholder-title\">\n            Channel Analytics Coming Soon\n          </h3>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"text-placeholder-description\">\n            This section will provide detailed analytics for all your advertising channels including Google, Facebook, Naver, and more.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n            <div className=\"text-center\" data-testid=\"feature-cross-channel\">\n              <div className=\"font-medium\">Cross-Channel Analysis</div>\n              <div>Compare channel performance</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-roas-tracking\">\n              <div className=\"font-medium\">ROAS Tracking</div>\n              <div>Monitor return on ad spend</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-attribution\">\n              <div className=\"font-medium\">Attribution Models</div>\n              <div>Understand customer journey</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2721},"client/src/pages/advertising-hub.tsx":{"content":"// src/pages/advertising-hub.tsx\n\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Target, BarChart3, Search, TrendingUp, LineChart } from \"lucide-react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n} from \"chart.js\";\n\n// Chart.js에 필요한 부품들을 등록합니다.\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\n// 1. 상단 4개 요약 카드\nconst AdSummaryCards = () => (\n  <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n    {/* 캠페인 카드 */}\n    <Card className=\"cursor-pointer hover:border-primary\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">캠페인</CardTitle>\n        <Target className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">23개 활성</div>\n        <p className=\"text-xs text-muted-foreground\">\n          18개 목표 이상, ₩8.4M 지출\n        </p>\n        <p className=\"text-xs text-primary mt-2\">캠페인 관리 →</p>\n      </CardContent>\n    </Card>\n\n    {/* 채널 카드 */}\n    <Card className=\"cursor-pointer hover:border-primary\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">채널</CardTitle>\n        <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">전체 ROAS 340%</div>\n        <p className=\"text-xs text-muted-foreground\">\n          구글 420%, 페이스북 180%, 네이버 280%\n        </p>\n        <p className=\"text-xs text-primary mt-2\">채널 분석 →</p>\n      </CardContent>\n    </Card>\n\n    {/* 키워드 카드 */}\n    <Card className=\"cursor-pointer hover:border-primary\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">키워드</CardTitle>\n        <Search className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">2,847개 활성</div>\n        <p className=\"text-xs text-muted-foreground\">156개 상위 성과</p>\n        <p className=\"text-xs text-primary mt-2\">키워드 최적화 →</p>\n      </CardContent>\n    </Card>\n\n    {/* 리포트 카드 */}\n    <Card className=\"cursor-pointer hover:border-primary\">\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">리포트</CardTitle>\n        <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">+23% 주간 ROI</div>\n        <p className=\"text-xs text-muted-foreground\">커스텀 리포트</p>\n        <p className=\"text-xs text-primary mt-2\">리포트 보기 →</p>\n      </CardContent>\n    </Card>\n  </div>\n);\n\n// 2. 차트 및 상세 정보 구역\nconst AdOverview = () => {\n  const roasTrendData = {\n    labels: [\"1월\", \"2월\", \"3월\", \"4월\", \"5월\", \"6월\"],\n    datasets: [\n      {\n        label: \"ROAS\",\n        data: [3.2, 3.8, 4.2, 3.8, 4.1, 4.8],\n        borderColor: \"rgba(59, 130, 246, 1)\",\n        backgroundColor: \"rgba(59, 130, 246, 0.1)\",\n        fill: true,\n        tension: 0.4,\n      },\n    ],\n  };\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: { legend: { display: false } },\n    scales: {\n      x: { ticks: { color: \"#888\" } },\n      y: {\n        beginAtZero: true,\n        ticks: { color: \"#888\" },\n        grid: { color: \"#444\" },\n      },\n    },\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6\">\n      {/* ROAS 트렌드 차트 */}\n      <Card className=\"lg:col-span-2\">\n        <CardHeader>\n          <CardTitle>ROAS 추세</CardTitle>\n        </CardHeader>\n        <CardContent className=\"h-72\">\n          <Line data={roasTrendData} options={chartOptions} />\n        </CardContent>\n      </Card>\n\n      {/* 월 예산 */}\n      <Card>\n        <CardHeader>\n          <CardTitle>월 예산</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-3xl font-bold mb-2\">₩8.4M</div>\n          <p className=\"text-xs text-muted-foreground mb-4\">₩10M 중 사용</p>\n          <div className=\"w-full bg-gray-600 rounded-full h-4\">\n            <div\n              className=\"bg-blue-500 h-4 rounded-full\"\n              style={{ width: \"84%\" }}\n            ></div>\n          </div>\n          <p className=\"text-right text-sm mt-2\">84%</p>\n        </CardContent>\n      </Card>\n\n      {/* 상위 캠페인 */}\n      <Card className=\"lg:col-span-3\">\n        <CardHeader>\n          <CardTitle>상위 캠페인</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <div>\n                <p className=\"font-medium\">프리미엄 전통주 컬렉션</p>\n                <p className=\"text-xs text-muted-foreground\">₩1.8M 지출</p>\n              </div>\n              <p className=\"font-bold text-green-500\">580% ROAS</p>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <div>\n                <p className=\"font-medium\">여름맞이 과실주 세일</p>\n                <p className=\"text-xs text-muted-foreground\">₩1.2M 지출</p>\n              </div>\n              <p className=\"font-bold text-green-500\">420% ROAS</p>\n            </div>\n            <div className=\"flex justify-between items-center text-sm\">\n              <div>\n                <p className=\"font-medium\">명절 선물세트 프로모션</p>\n                <p className=\"text-xs text-muted-foreground\">₩2.2M 지출</p>\n              </div>\n              <p className=\"font-bold text-green-500\">360% ROAS</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// 최종 광고 허브 화면 조립\nfunction AdvertisingHub() {\n  return (\n    <div className=\"space-y-8\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold\">광고 퍼포먼스</h1>\n        <p className=\"text-sm text-muted-foreground\">전체 채널 및 ROI 요약</p>\n      </div>\n\n      {/* 상단 4개 카드 */}\n      <AdSummaryCards />\n\n      {/* 개요: ROAS 추세, 예산, 상위 캠페인 */}\n      <AdOverview />\n    </div>\n  );\n}\n\nexport default AdvertisingHub;\n","size_bytes":6745},"client/src/pages/advertising-keywords.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Search, Upload } from \"lucide-react\";\n\nexport default function AdvertisingKeywords() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/advertising\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-keywords-page-title\">\n              Keyword Optimization\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-keywords-description\">\n              Optimize keywords for better performance\n            </p>\n          </div>\n        </div>\n        <Button data-testid=\"button-import-keywords\">\n          <Upload className=\"w-4 h-4 mr-2\" />\n          Import Keywords\n        </Button>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-keywords-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"w-8 h-8 text-green-500\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-placeholder-title\">\n            Keyword Optimization Coming Soon\n          </h3>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"text-placeholder-description\">\n            This section will provide powerful keyword management and optimization tools to improve your campaign performance.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n            <div className=\"text-center\" data-testid=\"feature-keyword-research\">\n              <div className=\"font-medium\">Keyword Research</div>\n              <div>Discover new opportunities</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-bid-optimization\">\n              <div className=\"font-medium\">Bid Optimization</div>\n              <div>Automated bid management</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-negative-keywords\">\n              <div className=\"font-medium\">Negative Keywords</div>\n              <div>Filter unwanted traffic</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2702},"client/src/pages/advertising-performance.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { KPICard } from \"@/components/kpi-card\";\nimport { ChartCard } from \"@/components/chart-card\";\nimport { InteractiveChart } from \"@/components/interactive-chart\";\nimport { Eye, MousePointer, DollarSign, TrendingUp } from \"lucide-react\";\n\n\nexport default function AdvertisingPerformance() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: [\"/api/metrics/advertising\"]\n  });\n\n  const { data: chartData } = useQuery({\n    queryKey: [\"/api/charts/advertising\"]\n  });\n\n  // Get specific chart data with fallbacks\n  const adSpendChart = Array.isArray(chartData) ? chartData.find((chart: any) => chart.chartId === 'adSpendChart') : null;\n  const campaignChart = Array.isArray(chartData) ? chartData.find((chart: any) => chart.chartId === 'campaignChart') : null;\n\n  // Sample fallback data for charts\n  const sampleAdSpendData = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n    datasets: [\n      {\n        label: 'Ad Spend',\n        data: [12000, 15000, 18000, 16000, 20000, 24000],\n        borderColor: 'rgba(239, 68, 68, 1)',\n        backgroundColor: 'rgba(239, 68, 68, 0.1)',\n        yAxisID: 'y'\n      },\n      {\n        label: 'Revenue',\n        data: [48000, 75000, 90000, 80000, 100000, 120000],\n        borderColor: 'rgba(16, 185, 129, 1)',\n        backgroundColor: 'rgba(16, 185, 129, 0.1)',\n        yAxisID: 'y1'\n      }\n    ]\n  };\n\n  const sampleCampaignData = {\n    labels: ['Google Ads', 'Facebook', 'Instagram', 'LinkedIn', 'Twitter', 'YouTube'],\n    datasets: [{\n      label: 'Campaign Performance',\n      data: [2400000, 1800000, 1200000, 800000, 600000, 900000],\n      backgroundColor: [\n        'rgba(59, 130, 246, 0.8)',\n        'rgba(16, 185, 129, 0.8)',\n        'rgba(245, 158, 11, 0.8)',\n        'rgba(239, 68, 68, 0.8)',\n        'rgba(139, 92, 246, 0.8)',\n        'rgba(236, 72, 153, 0.8)'\n      ]\n    }]\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div key={i} className=\"h-32 bg-card rounded-xl animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const getMetricValue = (name: string) => {\n    return Array.isArray(metrics) ? metrics.find((m: any) => m.metricName === name) || {} : {};\n  };\n\n  const totalImpressions = getMetricValue(\"totalImpressions\");\n  const clickThroughRate = getMetricValue(\"clickThroughRate\");\n  const costPerClick = getMetricValue(\"costPerClick\");\n  const roas = getMetricValue(\"roas\");\n\n  return (\n    <div className=\"space-y-8\">\n      {/* KPI Cards */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-4 gap-6\">\n        <KPICard\n          title=\"Total Impressions\"\n          value={totalImpressions.value || \"2.4M\"}\n          change={totalImpressions.change}\n          icon={<Eye className=\"w-5 h-5 text-blue-500\" />}\n          iconBgColor=\"bg-blue-500/10\"\n          testId=\"kpi-total-impressions\"\n        />\n        \n        <KPICard\n          title=\"Click-through Rate\"\n          value={clickThroughRate.value || \"3.24%\"}\n          change={clickThroughRate.change}\n          icon={<MousePointer className=\"w-5 h-5 text-green-500\" />}\n          iconBgColor=\"bg-green-500/10\"\n          testId=\"kpi-click-through-rate\"\n        />\n        \n        <KPICard\n          title=\"Cost Per Click\"\n          value={costPerClick.value || \"$0.82\"}\n          change={costPerClick.change}\n          icon={<DollarSign className=\"w-5 h-5 text-amber-500\" />}\n          iconBgColor=\"bg-amber-500/10\"\n          testId=\"kpi-cost-per-click\"\n        />\n        \n        <KPICard\n          title=\"ROAS\"\n          value={roas.value || \"4.2x\"}\n          change={roas.change}\n          icon={<TrendingUp className=\"w-5 h-5 text-purple-500\" />}\n          iconBgColor=\"bg-purple-500/10\"\n          testId=\"kpi-roas\"\n        />\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <ChartCard\n          title=\"Ad Spend vs Revenue\"\n          hasFilter={true}\n          testId=\"chart-ad-spend-revenue\"\n        >\n          <InteractiveChart\n            type=\"line\"\n            data={adSpendChart?.data || sampleAdSpendData}\n            options={{\n              scales: {\n                y: {\n                  type: 'linear',\n                  display: true,\n                  position: 'left',\n                },\n                y1: {\n                  type: 'linear',\n                  display: true,\n                  position: 'right',\n                  grid: {\n                    drawOnChartArea: false,\n                  },\n                },\n              }\n            }}\n            testId=\"chart-ad-spend\"\n          />\n        </ChartCard>\n        \n        <ChartCard\n          title=\"Campaign Performance\"\n          hasFilter={true}\n          testId=\"chart-campaign-performance\"\n        >\n          <InteractiveChart\n            type=\"doughnut\"\n            data={campaignChart?.data || sampleCampaignData}\n            testId=\"chart-campaign\"\n          />\n        </ChartCard>\n      </div>\n    </div>\n  );\n}","size_bytes":5136},"client/src/pages/advertising-reports.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, TrendingUp, Download } from \"lucide-react\";\n\nexport default function AdvertisingReports() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/advertising\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-reports-page-title\">\n              Advertising Reports\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"text-reports-description\">\n              Generate and view custom advertising reports\n            </p>\n          </div>\n        </div>\n        <Button data-testid=\"button-download-report\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Download Report\n        </Button>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-reports-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-16 h-16 bg-purple-500/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <TrendingUp className=\"w-8 h-8 text-purple-500\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-placeholder-title\">\n            Advanced Reports Coming Soon\n          </h3>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"text-placeholder-description\">\n            This section will provide comprehensive reporting tools with custom dashboards, scheduled reports, and advanced analytics.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n            <div className=\"text-center\" data-testid=\"feature-custom-reports\">\n              <div className=\"font-medium\">Custom Reports</div>\n              <div>Build personalized reports</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-scheduled-reports\">\n              <div className=\"font-medium\">Scheduled Reports</div>\n              <div>Automated report delivery</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"feature-data-visualization\">\n              <div className=\"font-medium\">Data Visualization</div>\n              <div>Interactive charts & graphs</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2724},"client/src/pages/cash-flow.tsx":{"content":"// src/pages/cash-flow.tsx\n\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  Wallet,\n  TrendingUp,\n  AlertTriangle,\n  Filter,\n  Calendar,\n  ArrowUpRight,\n  ArrowDownLeft,\n  Clock,\n  DollarSign,\n  Target,\n  Settings,\n  Download,\n  Zap,\n} from \"lucide-react\";\nimport { Line, Doughnut } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  ArcElement,\n  Tooltip,\n  Legend,\n  Filler,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  ArcElement,\n  Tooltip,\n  Legend,\n  Filler,\n);\n\nexport default function CashFlow() {\n  const [transactionFilter, setTransactionFilter] = useState(\"all\");\n  const [timeFilter, setTimeFilter] = useState(\"week\");\n\n  // 샘플 데이터 (한글화)\n  const criticalAlerts = [\n    {\n      type: \"runway\",\n      severity: \"medium\",\n      message: \"현금 활주로가 4.2개월로 감소 - 비용 최적화를 고려하세요\",\n      visible: true,\n    },\n    {\n      type: \"spending\",\n      severity: \"high\",\n      message: \"마케팅 비용이 3개월 평균 대비 34% 증가했습니다\",\n      visible: true,\n    },\n  ];\n  const forecastData = {\n    labels: [\"1개월\", \"2개월\", \"3개월\", \"4개월\", \"5개월\", \"6개월\"],\n    datasets: [\n      {\n        label: \"수입\",\n        data: [4500, 4800, 4600, 5200, 4900, 5100],\n        borderColor: \"rgba(16, 185, 129, 1)\",\n        fill: false,\n        tension: 0.3,\n      },\n      {\n        label: \"지출\",\n        data: [3800, 4100, 3900, 4300, 4200, 4400],\n        borderColor: \"rgba(239, 68, 68, 1)\",\n        fill: false,\n        tension: 0.3,\n      },\n    ],\n  };\n  const incomeSourcesData = {\n    labels: [\"제품 판매\", \"구독\", \"파트너십\", \"투자\", \"기타\"],\n    datasets: [\n      {\n        data: [65, 20, 8, 5, 2],\n        backgroundColor: [\n          \"#10b981\",\n          \"#3b82f6\",\n          \"#f59e0b\",\n          \"#8b5cf6\",\n          \"#9ca3af\",\n        ],\n      },\n    ],\n  };\n  const expenseCategoriesData = {\n    labels: [\"운영\", \"마케팅\", \"인건비\", \"기술\", \"법률\", \"기타\"],\n    datasets: [\n      {\n        data: [35, 25, 20, 12, 5, 3],\n        backgroundColor: [\n          \"#ef4444\",\n          \"#f59e0b\",\n          \"#3b82f6\",\n          \"#8b5cf6\",\n          \"#ec4899\",\n          \"#9ca3af\",\n        ],\n      },\n    ],\n  };\n  const transactions = [\n    {\n      id: 1,\n      date: \"2025-09-14\",\n      type: \"expense\",\n      amount: -2500000,\n      description: \"원료 충진기\",\n      category: \"포장 라인\",\n      status: \"완료\",\n    },\n    {\n      id: 2,\n      date: \"2025-09-13\",\n      type: \"expense\",\n      amount: -850000,\n      description: \"트레핏 슬롯\",\n      category: \"마케팅\",\n      status: \"완료\",\n    },\n    {\n      id: 3,\n      date: \"2025-09-13\",\n      type: \"expense\",\n      amount: -1200000,\n      description: \"원심 펌프\",\n      category: \"포장 라인\",\n      status: \"완료\",\n    },\n    {\n      id: 4,\n      date: \"2025-09-12\",\n      type: \"expense\",\n      amount: -3200000,\n      description: \"3톤 교반 스테인리스 솥\",\n      category: \"제조 설비\",\n      status: \"완료\",\n    },\n  ];\n  const alerts = [\n    {\n      id: 1,\n      type: \"warning\",\n      title: \"현금 부족 알림\",\n      message: \"가용 현금이 6개월 임계치 이하입니다\",\n      severity: \"보통\",\n      timestamp: \"2 시간 전\",\n    },\n    {\n      id: 2,\n      type: \"info\",\n      title: \"비정상 지출 패턴\",\n      message: \"마케팅 비용이 지난달 대비 40% 높습니다\",\n      severity: \"낮음\",\n      timestamp: \"1 일 전\",\n    },\n    {\n      id: 3,\n      type: \"success\",\n      title: \"매출 목표 달성\",\n      message: \"월 매출 목표를 5일 일찍 달성했습니다\",\n      severity: \"낮음\",\n      timestamp: \"3 일 전\",\n    },\n  ];\n  const formatCurrency = (amount: number) =>\n    `₩${new Intl.NumberFormat().format(amount)}`;\n  const getAlertIcon = (type: string) =>\n    ({\n      warning: <AlertTriangle className=\"w-4 h-4 text-amber-500\" />,\n      info: <TrendingUp className=\"w-4 h-4 text-blue-500\" />,\n      success: <ArrowUpRight className=\"w-4 h-4 text-green-500\" />,\n    })[type] || <AlertTriangle className=\"w-4 h-4 text-gray-500\" />;\n\n  // KPICard를 임시 Card로 대체합니다.\n  const KPICard = ({\n    title,\n    value,\n    change,\n    icon,\n  }: {\n    title: string;\n    value: string;\n    change: string;\n    icon: React.ReactNode;\n  }) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        {icon}\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">{change}</p>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-8 p-4 md:p-8\">\n      <h1 className=\"text-3xl font-bold\">현금흐름 관리</h1>\n\n      {/* 긴급 재무 알림 */}\n      <div className=\"space-y-2\">\n        {criticalAlerts\n          .filter((alert) => alert.visible)\n          .map((alert, index) => (\n            <Alert\n              key={index}\n              variant={alert.severity === \"high\" ? \"destructive\" : \"default\"}\n            >\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription className=\"font-medium\">\n                {alert.message}\n              </AlertDescription>\n            </Alert>\n          ))}\n      </div>\n\n      {/* 상단 KPI */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <KPICard\n          title=\"현재 보유 현금\"\n          value=\"₩180M\"\n          change=\"+5.2%\"\n          icon={<Wallet className=\"w-5 h-5 text-blue-500\" />}\n        />\n        <KPICard\n          title=\"가용 현금\"\n          value=\"₩165M\"\n          change=\"+3.8%\"\n          icon={<TrendingUp className=\"w-5 h-5 text-green-500\" />}\n        />\n        <KPICard\n          title=\"런웨이\"\n          value=\"4.0 개월\"\n          change=\"-0.2 개월\"\n          icon={<Clock className=\"w-5 h-5 text-amber-500\" />}\n        />\n      </div>\n\n      {/* 메인 차트와 사이드 차트 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* 6개월 현금흐름 예측 */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle>6개월 현금흐름 예측</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-72\">\n              <Line\n                data={forecastData}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  scales: {\n                    y: {\n                      ticks: {\n                        callback: (value) => `₩${Number(value) / 1000}K`,\n                      },\n                    },\n                  },\n                }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n        {/* 수입원 */}\n        <Card>\n          <CardHeader>\n            <CardTitle>수입원</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-72\">\n              <Doughnut\n                data={incomeSourcesData}\n                options={{ responsive: true, maintainAspectRatio: false }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 비용 카테고리 및 알림 */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* 비용 카테고리 */}\n        <Card>\n          <CardHeader>\n            <CardTitle>비용 카테고리</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-72\">\n              <Doughnut\n                data={expenseCategoriesData}\n                options={{ responsive: true, maintainAspectRatio: false }}\n              />\n            </div>\n          </CardContent>\n        </Card>\n        {/* 알림 */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <AlertTriangle className=\"w-5 h-5 text-amber-500\" />\n              <span>알림</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {alerts.map((alert) => (\n                <div\n                  key={alert.id}\n                  className=\"flex items-start space-x-3 p-3 bg-background rounded-lg border\"\n                >\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    {getAlertIcon(alert.type)}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-sm font-medium text-foreground\">\n                        {alert.title}\n                      </p>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge\n                          variant={\n                            alert.severity === \"medium\"\n                              ? \"destructive\"\n                              : \"secondary\"\n                          }\n                        >\n                          {alert.severity}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {alert.timestamp}\n                        </span>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {alert.message}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 거래 내역 테이블 */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>설비 투자 내역</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Select value={timeFilter} onValueChange={setTimeFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"week\">이번 주</SelectItem>\n                  <SelectItem value=\"month\">이번 달</SelectItem>\n                  <SelectItem value=\"quarter\">이번 분기</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select\n                value={transactionFilter}\n                onValueChange={setTransactionFilter}\n              >\n                <SelectTrigger className=\"w-32\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">전체</SelectItem>\n                  <SelectItem value=\"income\">수입</SelectItem>\n                  <SelectItem value=\"expense\">지출</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-3 font-medium text-muted-foreground\">\n                    날짜\n                  </th>\n                  <th className=\"text-left p-3 font-medium text-muted-foreground\">\n                    종류\n                  </th>\n                  <th className=\"text-left p-3 font-medium text-muted-foreground\">\n                    내용\n                  </th>\n                  <th className=\"text-left p-3 font-medium text-muted-foreground\">\n                    카테고리\n                  </th>\n                  <th className=\"text-right p-3 font-medium text-muted-foreground\">\n                    금액\n                  </th>\n                  <th className=\"text-center p-3 font-medium text-muted-foreground\">\n                    상태\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map((transaction) => (\n                  <tr\n                    key={transaction.id}\n                    className=\"border-b hover:bg-muted/50\"\n                  >\n                    <td className=\"p-3 text-sm\">{transaction.date}</td>\n                    <td className=\"p-3\">\n                      <div className=\"flex items-center space-x-2\">\n                        {transaction.type === \"income\" ? (\n                          <ArrowUpRight className=\"w-4 h-4 text-green-500\" />\n                        ) : (\n                          <ArrowDownLeft className=\"w-4 h-4 text-red-500\" />\n                        )}\n                        <span\n                          className={`text-sm capitalize ${\n                            transaction.type === \"income\"\n                              ? \"text-green-500\"\n                              : \"text-red-500\"\n                          }`}\n                        >\n                          {transaction.type === \"income\" ? \"수입\" : \"지출\"}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"p-3 text-sm\">{transaction.description}</td>\n                    <td className=\"p-3 text-sm text-muted-foreground\">\n                      {transaction.category}\n                    </td>\n                    <td\n                      className={`p-3 text-sm text-right font-medium ${\n                        transaction.amount > 0\n                          ? \"text-green-500\"\n                          : \"text-red-500\"\n                      }`}\n                    >\n                      {formatCurrency(Math.abs(transaction.amount))}\n                    </td>\n                    <td className=\"p-3 text-center\">\n                      <Badge\n                        variant={\n                          transaction.status === \"completed\"\n                            ? \"secondary\"\n                            : \"outline\"\n                        }\n                      >\n                        {transaction.status}\n                      </Badge>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14915},"client/src/pages/marketing-hub.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ChartCard } from \"@/components/chart-card\";\nimport { InteractiveChart } from \"@/components/interactive-chart\";\nimport { ArrowRight, Target, DollarSign, Search, FileText } from \"lucide-react\";\n\nexport default function MarketingHub() {\n  // 경쟁 포지셔닝 산점도 데이터 (가격 vs 리뷰 수)\n  const positioningData = {\n    datasets: [{\n      label: '경쟁사',\n      data: [\n        { x: 25000, y: 4.8, name: '브랜드 A' },\n        { x: 35000, y: 4.6, name: '브랜드 B' },\n        { x: 15000, y: 4.2, name: '브랜드 C' },\n        { x: 45000, y: 4.1, name: '브랜드 D' },\n        { x: 20000, y: 3.9, name: '브랜드 E' },\n        { x: 55000, y: 4.7, name: '브랜드 F' },\n        { x: 12000, y: 3.5, name: '브랜드 G' },\n        { x: 40000, y: 3.8, name: '브랜드 H' }\n      ],\n      backgroundColor: 'rgba(59, 130, 246, 0.6)',\n      borderColor: 'rgba(59, 130, 246, 1)',\n      borderWidth: 2,\n      pointRadius: 6\n    }, {\n      label: '우리 제품',\n      data: [\n        { x: 28000, y: 4.3, name: '우리 제품' }\n      ],\n      backgroundColor: 'rgba(239, 68, 68, 0.8)',\n      borderColor: 'rgba(239, 68, 68, 1)',\n      borderWidth: 3,\n      pointRadius: 10\n    }]\n  };\n\n  // 시장 기회 분석 데이터\n  const marketOpportunities = [\n    { quadrant: \"가성비 리더\", count: 2, color: \"bg-green-500\", position: \"높은 리뷰 + 낮은 가격\" },\n    { quadrant: \"프리미엄 플레이어\", count: 2, color: \"bg-blue-500\", position: \"높은 리뷰 + 높은 가격\" },\n    { quadrant: \"저가 옵션\", count: 2, color: \"bg-yellow-500\", position: \"낮은 리뷰 + 낮은 가격\" },\n    { quadrant: \"취약한 포지션\", count: 2, color: \"bg-red-500\", position: \"낮은 리뷰 + 높은 가격\" }\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hub Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* 경쟁 포지셔닝 카드 */}\n        <Link href=\"/marketing/positioning\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow duration-200 group\" data-testid=\"card-positioning\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                  <Target className=\"w-6 h-6 text-blue-500\" />\n                </div>\n                <span className=\"text-2xl\">🎯</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-positioning-title\">\n                경쟁 포지셔닝\n              </h3>\n              <div className=\"space-y-1 text-sm text-muted-foreground mb-4\">\n                <p data-testid=\"text-positioning-stats\">리뷰수 vs 가격 포지셔닝 매트릭스</p>\n                <p data-testid=\"text-positioning-analysis\">4분면 분석 완료</p>\n              </div>\n              <div className=\"w-full flex justify-between items-center text-sm group-hover:text-primary\" data-testid=\"link-positioning-map\">\n                <span>포지셔닝 맵 보기 →</span>\n                <ArrowRight className=\"w-4 h-4\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        {/* 가격 전략 카드 */}\n        <Link href=\"/marketing/pricing\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow duration-200 group\" data-testid=\"card-pricing\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-green-500\" />\n                </div>\n                <span className=\"text-2xl\">💰</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-pricing-title\">\n                가격 전략\n              </h3>\n              <div className=\"space-y-1 text-sm text-muted-foreground mb-4\">\n                <p data-testid=\"text-pricing-stats\">포지셔닝 기반 가격 최적화 제안</p>\n                <p data-testid=\"text-pricing-optimization\">8개 전략 제안</p>\n              </div>\n              <div className=\"w-full flex justify-between items-center text-sm group-hover:text-primary\" data-testid=\"link-pricing-optimization\">\n                <span>가격 최적화 →</span>\n                <ArrowRight className=\"w-4 h-4\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        {/* 시장 인텔리전스 카드 */}\n        <Link href=\"/marketing/intelligence\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow duration-200 group\" data-testid=\"card-intelligence\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n                  <Search className=\"w-6 h-6 text-purple-500\" />\n                </div>\n                <span className=\"text-2xl\">🔍</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-intelligence-title\">\n                시장 인텔리전스\n              </h3>\n              <div className=\"space-y-1 text-sm text-muted-foreground mb-4\">\n                <p data-testid=\"text-intelligence-stats\">경쟁사 분석 및 시장 트렌드 인사이트</p>\n                <p data-testid=\"text-intelligence-competitors\">12개 경쟁사 추적 중</p>\n              </div>\n              <div className=\"w-full flex justify-between items-center text-sm group-hover:text-primary\" data-testid=\"link-market-analysis\">\n                <span>시장 분석 →</span>\n                <ArrowRight className=\"w-4 h-4\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        {/* 전략 제안 카드 */}\n        <Link href=\"/marketing/strategy\">\n          <Card className=\"cursor-pointer hover:shadow-lg transition-shadow duration-200 group\" data-testid=\"card-strategy\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"w-12 h-12 bg-orange-500/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-orange-500\" />\n                </div>\n                <span className=\"text-2xl\">📋</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-strategy-title\">\n                전략 제안\n              </h3>\n              <div className=\"space-y-1 text-sm text-muted-foreground mb-4\">\n                <p data-testid=\"text-strategy-stats\">제품, 프로모션, 리뷰 개선 전략</p>\n                <p data-testid=\"text-strategy-recommendations\">15개 권장 사항</p>\n              </div>\n              <div className=\"w-full flex justify-between items-center text-sm group-hover:text-primary\" data-testid=\"link-strategy-view\">\n                <span>전략 보기 →</span>\n                <ArrowRight className=\"w-4 h-4\" />\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n\n      {/* Overview Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* 경쟁 포지셔닝 산점도 */}\n        <ChartCard\n          title=\"경쟁 포지셔닝 분석\"\n          className=\"lg:col-span-2\"\n          testId=\"chart-positioning-scatter\"\n        >\n          <InteractiveChart\n            type=\"scatter\"\n            data={positioningData}\n            options={{\n              scales: {\n                x: {\n                  title: {\n                    display: true,\n                    text: '가격 (원)'\n                  },\n                  ticks: {\n                    callback: function(value: any) {\n                      return '₩' + (value / 1000) + 'K';\n                    }\n                  }\n                },\n                y: {\n                  title: {\n                    display: true,\n                    text: '리뷰 평점'\n                  },\n                  min: 3,\n                  max: 5,\n                  ticks: {\n                    stepSize: 0.2\n                  }\n                }\n              },\n              plugins: {\n                legend: {\n                  display: true,\n                  position: 'top' as const\n                },\n                tooltip: {\n                  callbacks: {\n                    label: function(context: any) {\n                      return `${context.raw.name}: ₩${context.raw.x.toLocaleString()}, ${context.raw.y}★`;\n                    }\n                  }\n                }\n              }\n            }}\n            testId=\"chart-positioning\"\n          />\n        </ChartCard>\n\n        {/* 시장 기회 분석 */}\n        <Card data-testid=\"card-market-opportunities\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-6\" data-testid=\"text-opportunities-title\">\n              시장 기회 분석\n            </h3>\n            <div className=\"space-y-4\">\n              {marketOpportunities.map((opportunity, index) => (\n                <div key={index} className=\"p-3 rounded-lg border\" data-testid={`opportunity-item-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className={`w-3 h-3 rounded-full ${opportunity.color}`} />\n                      <span className=\"text-sm font-medium text-foreground\" data-testid={`opportunity-quadrant-${index}`}>\n                        {opportunity.quadrant}\n                      </span>\n                    </div>\n                    <span className=\"text-sm font-semibold text-foreground\" data-testid={`opportunity-count-${index}`}>\n                      {opportunity.count}개 업체\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\" data-testid={`opportunity-position-${index}`}>\n                    {opportunity.position}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* 경쟁 분석 요약 */}\n      <Card data-testid=\"card-competitive-summary\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-foreground mb-6\" data-testid=\"text-competitive-title\">\n            경쟁 분석 요약\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\" data-testid=\"summary-position\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-2\">중간</div>\n              <div className=\"text-sm text-muted-foreground\">현재 포지션</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">가격대비 적정한 품질</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"summary-opportunity\">\n              <div className=\"text-2xl font-bold text-green-600 mb-2\">상승</div>\n              <div className=\"text-sm text-muted-foreground\">기회 방향</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">프리미엄 시장 진입 가능</div>\n            </div>\n            <div className=\"text-center\" data-testid=\"summary-recommendation\">\n              <div className=\"text-2xl font-bold text-purple-600 mb-2\">품질</div>\n              <div className=\"text-sm text-muted-foreground\">핵심 전략</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">리뷰 점수 향상 집중</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12089},"client/src/pages/marketing-intelligence.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Search } from \"lucide-react\";\n\nexport default function MarketingIntelligence() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/marketing\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-marketing\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              마케팅 허브로 돌아가기\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n              <Search className=\"w-5 h-5 text-purple-500\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-intelligence-title\">\n                시장 인텔리전스\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-intelligence-subtitle\">\n                경쟁사 분석 및 시장 트렌드 인사이트\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-intelligence-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-20 h-20 bg-purple-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Search className=\"w-10 h-10 text-purple-500\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-4\" data-testid=\"text-placeholder-title\">\n            시장 인텔리전스 페이지 개발 중\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\" data-testid=\"text-placeholder-description\">\n            경쟁사 분석 및 시장 트렌드 인사이트 기능이 곧 추가될 예정입니다.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\" data-testid=\"features-list\">\n            <p>• 실시간 경쟁사 모니터링</p>\n            <p>• 시장 트렌드 분석</p>\n            <p>• 소비자 행동 인사이트</p>\n            <p>• 기회 영역 식별</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2447},"client/src/pages/marketing-positioning.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Target } from \"lucide-react\";\n\nexport default function MarketingPositioning() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/marketing\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-marketing\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              마케팅 허브로 돌아가기\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n              <Target className=\"w-5 h-5 text-blue-500\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-positioning-title\">\n                경쟁 포지셔닝 분석\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-positioning-subtitle\">\n                시장 내 경쟁 위치 및 포지셔닝 전략 분석\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-positioning-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-20 h-20 bg-blue-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Target className=\"w-10 h-10 text-blue-500\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-4\" data-testid=\"text-placeholder-title\">\n            경쟁 포지셔닝 페이지 개발 중\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\" data-testid=\"text-placeholder-description\">\n            리뷰수 vs 가격 포지셔닝 매트릭스와 4분면 분석 기능이 곧 추가될 예정입니다.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\" data-testid=\"features-list\">\n            <p>• 경쟁사 포지셔닝 맵</p>\n            <p>• 4분면 시장 분석</p>\n            <p>• 포지셔닝 개선 제안</p>\n            <p>• 경쟁 우위 분석</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2443},"client/src/pages/marketing-pricing.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, DollarSign } from \"lucide-react\";\n\nexport default function MarketingPricing() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/marketing\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-marketing\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              마케팅 허브로 돌아가기\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-green-500/10 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"w-5 h-5 text-green-500\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-pricing-title\">\n                가격 전략 최적화\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-pricing-subtitle\">\n                경쟁 분석 기반 가격 최적화 및 전략 제안\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-pricing-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-20 h-20 bg-green-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <DollarSign className=\"w-10 h-10 text-green-500\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-4\" data-testid=\"text-placeholder-title\">\n            가격 전략 페이지 개발 중\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\" data-testid=\"text-placeholder-description\">\n            포지셔닝 기반 가격 최적화 제안 및 경쟁사 분석 기능이 곧 추가될 예정입니다.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\" data-testid=\"features-list\">\n            <p>• 경쟁사 가격 분석</p>\n            <p>• 최적 가격대 제안</p>\n            <p>• 수익성 시뮬레이션</p>\n            <p>• 가격 탄력성 분석</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2436},"client/src/pages/marketing-strategy.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, FileText } from \"lucide-react\";\n\nexport default function MarketingStrategy() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/marketing\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back-marketing\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              마케팅 허브로 돌아가기\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-orange-500/10 rounded-lg flex items-center justify-center\">\n              <FileText className=\"w-5 h-5 text-orange-500\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-strategy-title\">\n                마케팅 전략 제안\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-strategy-subtitle\">\n                제품, 프로모션, 리뷰 개선 전략\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <Card data-testid=\"card-strategy-placeholder\">\n        <CardContent className=\"p-12 text-center\">\n          <div className=\"w-20 h-20 bg-orange-500/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <FileText className=\"w-10 h-10 text-orange-500\" />\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-4\" data-testid=\"text-placeholder-title\">\n            전략 제안 페이지 개발 중\n          </h2>\n          <p className=\"text-muted-foreground mb-6 max-w-md mx-auto\" data-testid=\"text-placeholder-description\">\n            제품, 프로모션, 리뷰 개선 전략 제안 기능이 곧 추가될 예정입니다.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\" data-testid=\"features-list\">\n            <p>• 리뷰 캠페인 전략</p>\n            <p>• 제품 컨셉 개선</p>\n            <p>• 프로모션 이벤트 기획</p>\n            <p>• 마케팅 메시지 최적화</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2417},"server/routes/realEcommerce.ts":{"content":"import { Express } from \"express\";\nimport axios from \"axios\";\n\nexport function addRealEcommerceRoutes(app: Express) {\n  // 연동 상태 확인 API\n  app.get(\"/api/ecommerce/connection-status\", (req, res) => {\n    res.json({\n      platforms: {\n        smartstore: {\n          enabled: Boolean(process.env.SMARTSTORE_SELLER_ID),\n          configured: Boolean(process.env.SMARTSTORE_API_KEY),\n        },\n        coupang: {\n          enabled: Boolean(process.env.COUPANG_VENDOR_ID),\n          configured: Boolean(process.env.COUPANG_ACCESS_KEY),\n        },\n      },\n      message: \"연동 상태 확인 완료\",\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // 테스트 API\n  app.get(\"/api/ecommerce/test\", (req, res) => {\n    res.json({\n      message: \"이커머스 API 테스트 성공\",\n      timestamp: new Date().toISOString(),\n    });\n  });\n\n  // 실제 주문 수집 API 수정\n  app.post(\"/api/ecommerce/collect-real-orders\", async (req, res) => {\n    try {\n      const orders = [];\n      const errors = [];\n\n      // 스마트스토어 API 테스트 호출\n      if (process.env.SMARTSTORE_API_KEY) {\n        try {\n          // 간단한 연결 테스트 (실제 주문 조회는 복잡한 인증이 필요)\n          orders.push({\n            platform: \"smartstore\",\n            status: \"API 키 설정됨 - 실제 주문 조회 준비\",\n            sellerId: process.env.SMARTSTORE_SELLER_ID,\n          });\n        } catch (error) {\n          errors.push({ platform: \"smartstore\", error: error.message });\n        }\n      }\n\n      // 쿠팡 API 키 설정 확인\n      if (process.env.COUPANG_ACCESS_KEY) {\n        orders.push({ platform: \"coupang\", status: \"API 키 설정됨\" });\n      }\n\n      res.json({\n        success: true,\n        message: \"실제 API 연동 테스트 완료\",\n        ordersCollected: orders.length,\n        orders: orders,\n        errors: errors,\n        timestamp: new Date().toISOString(),\n      });\n    } catch (error) {\n      res.status(500).json({\n        success: false,\n        error: error.message || \"주문 수집 실패\",\n      });\n    }\n  });\n\n  console.log(\"이커머스 API 라우트가 등록되었습니다.\");\n}\n","size_bytes":2179},"server/services/advertisingIntergration.ts":{"content":"// server/services/advertisingIntegration.ts\nimport axios from \"axios\";\nimport { db } from \"../db\";\nimport { adCampaigns, adPerformance } from \"../schemas/advertising\";\n\ninterface AdMetrics {\n  impressions: number;\n  clicks: number;\n  cost: number;\n  conversions: number;\n  revenue: number;\n  roas: number;\n  ctr: number;\n  cpc: number;\n}\n\n// Google Ads API 연동\nclass GoogleAdsAPI {\n  private customerId: string;\n  private developerToken: string;\n  private refreshToken: string;\n  private clientId: string;\n  private clientSecret: string;\n\n  constructor(credentials: any) {\n    this.customerId = credentials.customerId;\n    this.developerToken = credentials.developerToken;\n    this.refreshToken = credentials.refreshToken;\n    this.clientId = credentials.clientId;\n    this.clientSecret = credentials.clientSecret;\n  }\n\n  async getAccessToken(): Promise<string> {\n    try {\n      const response = await axios.post(\"https://oauth2.googleapis.com/token\", {\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        refresh_token: this.refreshToken,\n        grant_type: \"refresh_token\",\n      });\n      return response.data.access_token;\n    } catch (error) {\n      throw new Error(\"Google Ads 인증 실패\");\n    }\n  }\n\n  async getCampaignPerformance(\n    startDate: string,\n    endDate: string,\n  ): Promise<AdMetrics[]> {\n    const accessToken = await this.getAccessToken();\n\n    try {\n      const query = `\n        SELECT \n          campaign.id,\n          campaign.name,\n          metrics.impressions,\n          metrics.clicks,\n          metrics.cost_micros,\n          metrics.conversions,\n          metrics.conversions_value\n        FROM campaign \n        WHERE segments.date BETWEEN '${startDate}' AND '${endDate}'\n      `;\n\n      const response = await axios.post(\n        `https://googleads.googleapis.com/v14/customers/${this.customerId}/googleAds:searchStream`,\n        { query },\n        {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n            \"developer-token\": this.developerToken,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      return this.processGoogleAdsData(response.data);\n    } catch (error) {\n      console.error(\"Google Ads API 오류:\", error);\n      throw new Error(\"Google Ads 데이터 조회 실패\");\n    }\n  }\n\n  private processGoogleAdsData(data: any): AdMetrics[] {\n    // Google Ads 응답 데이터 처리\n    return (\n      data.results?.map((result: any) => {\n        const metrics = result.metrics;\n        const cost = metrics.cost_micros / 1000000; // 마이크로 단위를 원화로 변환\n        const revenue = metrics.conversions_value || 0;\n\n        return {\n          impressions: metrics.impressions || 0,\n          clicks: metrics.clicks || 0,\n          cost,\n          conversions: metrics.conversions || 0,\n          revenue,\n          roas: revenue > 0 ? (revenue / cost) * 100 : 0,\n          ctr:\n            metrics.impressions > 0\n              ? (metrics.clicks / metrics.impressions) * 100\n              : 0,\n          cpc: metrics.clicks > 0 ? cost / metrics.clicks : 0,\n        };\n      }) || []\n    );\n  }\n}\n\n// Facebook Ads API 연동\nclass FacebookAdsAPI {\n  private accessToken: string;\n  private accountId: string;\n\n  constructor(credentials: any) {\n    this.accessToken = credentials.accessToken;\n    this.accountId = credentials.accountId;\n  }\n\n  async getCampaignPerformance(\n    startDate: string,\n    endDate: string,\n  ): Promise<AdMetrics[]> {\n    try {\n      const fields = [\n        \"campaign_name\",\n        \"impressions\",\n        \"clicks\",\n        \"spend\",\n        \"actions\",\n        \"action_values\",\n      ];\n\n      const response = await axios.get(\n        `https://graph.facebook.com/v18.0/act_${this.accountId}/insights`,\n        {\n          params: {\n            fields: fields.join(\",\"),\n            time_range: JSON.stringify({\n              since: startDate,\n              until: endDate,\n            }),\n            level: \"campaign\",\n            access_token: this.accessToken,\n          },\n        },\n      );\n\n      return this.processFacebookAdsData(response.data.data);\n    } catch (error) {\n      console.error(\"Facebook Ads API 오류:\", error);\n      throw new Error(\"Facebook Ads 데이터 조회 실패\");\n    }\n  }\n\n  private processFacebookAdsData(data: any[]): AdMetrics[] {\n    return data.map((campaign) => {\n      const spend = parseFloat(campaign.spend || \"0\");\n      const purchases =\n        campaign.actions?.find(\n          (action: any) => action.action_type === \"purchase\",\n        )?.value || 0;\n      const revenue =\n        campaign.action_values?.find(\n          (value: any) => value.action_type === \"purchase\",\n        )?.value || 0;\n\n      return {\n        impressions: parseInt(campaign.impressions || \"0\"),\n        clicks: parseInt(campaign.clicks || \"0\"),\n        cost: spend,\n        conversions: parseInt(purchases),\n        revenue: parseFloat(revenue),\n        roas: revenue > 0 ? (parseFloat(revenue) / spend) * 100 : 0,\n        ctr:\n          campaign.impressions > 0\n            ? (parseInt(campaign.clicks) / parseInt(campaign.impressions)) * 100\n            : 0,\n        cpc: campaign.clicks > 0 ? spend / parseInt(campaign.clicks) : 0,\n      };\n    });\n  }\n}\n\n// 네이버 파워링크 API 연동\nclass NaverPowerLinkAPI {\n  private apiKey: string;\n  private secretKey: string;\n  private customerId: string;\n\n  constructor(credentials: any) {\n    this.apiKey = credentials.apiKey;\n    this.secretKey = credentials.secretKey;\n    this.customerId = credentials.customerId;\n  }\n\n  async getCampaignPerformance(\n    startDate: string,\n    endDate: string,\n  ): Promise<AdMetrics[]> {\n    try {\n      const timestamp = Date.now().toString();\n      const signature = this.generateSignature(timestamp);\n\n      const response = await axios.post(\n        \"https://api.naver.com/keywordstool\",\n        {\n          hintKeywords: [],\n          showDetail: 1,\n          startDate,\n          endDate,\n        },\n        {\n          headers: {\n            \"X-Timestamp\": timestamp,\n            \"X-API-KEY\": this.apiKey,\n            \"X-Customer\": this.customerId,\n            \"X-Signature\": signature,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n      );\n\n      return this.processNaverData(response.data);\n    } catch (error) {\n      console.error(\"네이버 파워링크 API 오류:\", error);\n      throw new Error(\"네이버 파워링크 데이터 조회 실패\");\n    }\n  }\n\n  private generateSignature(timestamp: string): string {\n    // HMAC-SHA256 서명 생성 (실제 구현 필요)\n    return \"mock_signature\";\n  }\n\n  private processNaverData(data: any): AdMetrics[] {\n    // 네이버 파워링크 데이터 처리 로직\n    return [];\n  }\n}\n\n// 통합 광고 성과 수집 서비스\nexport class AdPerformanceCollector {\n  static async collectAllAdData(\n    companyId: string,\n    startDate: string,\n    endDate: string,\n  ) {\n    const results = {\n      google: null,\n      facebook: null,\n      naver: null,\n      errors: [],\n    };\n\n    // 각 플랫폼별 연동 정보 조회\n    const integrations = await db\n      .select()\n      .from(platformIntegrations)\n      .where(eq(platformIntegrations.companyId, companyId))\n      .where(eq(platformIntegrations.isActive, true));\n\n    for (const integration of integrations) {\n      try {\n        switch (integration.platform) {\n          case \"google_ads\":\n            const googleAPI = new GoogleAdsAPI(integration.credentials);\n            results.google = await googleAPI.getCampaignPerformance(\n              startDate,\n              endDate,\n            );\n            break;\n\n          case \"facebook_ads\":\n            const facebookAPI = new FacebookAdsAPI(integration.credentials);\n            results.facebook = await facebookAPI.getCampaignPerformance(\n              startDate,\n              endDate,\n            );\n            break;\n\n          case \"naver_powerlink\":\n            const naverAPI = new NaverPowerLinkAPI(integration.credentials);\n            results.naver = await naverAPI.getCampaignPerformance(\n              startDate,\n              endDate,\n            );\n            break;\n        }\n\n        // 수집된 데이터 DB 저장\n        await this.saveAdPerformanceData(\n          companyId,\n          integration.platform,\n          results[integration.platform.split(\"_\")[0]],\n        );\n      } catch (error) {\n        results.errors.push({\n          platform: integration.platform,\n          error: error.message,\n        });\n      }\n    }\n\n    return results;\n  }\n\n  private static async saveAdPerformanceData(\n    companyId: string,\n    platform: string,\n    metrics: AdMetrics[],\n  ) {\n    if (!metrics || metrics.length === 0) return;\n\n    for (const metric of metrics) {\n      await db.insert(adPerformance).values({\n        companyId,\n        platform,\n        date: new Date(),\n        impressions: metric.impressions,\n        clicks: metric.clicks,\n        cost: metric.cost.toString(),\n        conversions: metric.conversions,\n        revenue: metric.revenue.toString(),\n        roas: metric.roas,\n        ctr: metric.ctr,\n        cpc: metric.cpc,\n      });\n    }\n  }\n\n  // ROAS 임계치 알림 체크\n  static async checkROASAlerts(companyId: string) {\n    const recentPerformance = await db\n      .select()\n      .from(adPerformance)\n      .where(eq(adPerformance.companyId, companyId))\n      .where(\n        gte(adPerformance.date, new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)),\n      ) // 최근 7일\n      .orderBy(desc(adPerformance.date));\n\n    const platformROAS = {};\n\n    recentPerformance.forEach((perf) => {\n      if (!platformROAS[perf.platform]) {\n        platformROAS[perf.platform] = [];\n      }\n      platformROAS[perf.platform].push(perf.roas);\n    });\n\n    // 각 플랫폼별 평균 ROAS 계산 및 알림\n    for (const [platform, roasValues] of Object.entries(platformROAS)) {\n      const avgRoas = roasValues.reduce((a, b) => a + b, 0) / roasValues.length;\n\n      if (avgRoas < 300) {\n        // ROAS 300% 미만시 알림\n        await AlertService.createAlert(companyId, {\n          type: \"roas_drop\",\n          severity: avgRoas < 200 ? \"critical\" : \"high\",\n          title: `${platform} ROAS 하락 알림`,\n          message: `${platform} 평균 ROAS가 ${avgRoas.toFixed(1)}%로 목표치를 하회하고 있습니다.`,\n          metadata: {\n            platform,\n            currentRoas: avgRoas,\n            threshold: 300,\n          },\n        });\n      }\n    }\n  }\n}\n","size_bytes":10546},"server/services/cashFlowPredictor.ts":{"content":"// server/services/cashFlowPredictor.ts\nimport { db } from '../db';\nimport { orders, inventory, adPerformance, cashFlowPredictions } from '../schemas/enhanced';\nimport { eq, gte, between, desc, and } from 'drizzle-orm';\n\ninterface CashFlowData {\n  date: string;\n  revenue: number;\n  adSpend: number;\n  operatingCosts: number;\n  netCashFlow: number;\n  cumulativeCash: number;\n}\n\ninterface PredictionResult {\n  currentCash: number;\n  monthlyBurnRate: number;\n  runwayDays: number;\n  projectedCashFlow: CashFlowData[];\n  recommendations: string[];\n  alerts: Array<{\n    type: string;\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    message: string;\n    threshold?: number;\n  }>;\n}\n\nexport class CashFlowPredictor {\n  // 메인 현금흐름 예측 함수\n  static async predictCashFlow(companyId: string, months: number = 6): Promise<PredictionResult> {\n    try {\n      // 1. 과거 데이터 수집 (최근 3개월)\n      const historicalData = await this.collectHistoricalData(companyId, 90);\n\n      // 2. 패턴 분석\n      const patterns = this.analyzePatterns(historicalData);\n\n      // 3. 미래 예측 (6개월)\n      const predictions = this.generatePredictions(patterns, months);\n\n      // 4. 현금 상태 계산\n      const currentCash = await this.getCurrentCashPosition(companyId);\n      const runwayAnalysis = this.calculateRunway(currentCash, predictions);\n\n      // 5. 권장사항 생성\n      const recommendations = this.generateRecommendations(patterns, runwayAnalysis);\n\n      // 6. 알림 생성\n      const alerts = this.generateAlerts(runwayAnalysis, patterns);\n\n      // 7. 예측 결과 DB 저장\n      await this.savePredictions(companyId, predictions);\n\n      return {\n        currentCash,\n        month","size_bytes":1738},"server/services/dataScheduler.ts":{"content":"// server/services/dataScheduler.ts\nimport cron from \"node-cron\";\nimport { db } from \"../db\";\nimport { orders, inventory, adPerformance, alerts } from \"../schemas/enhanced\";\nimport { OrderCollectionService } from \"./realEcommerce\";\nimport { AdPerformanceCollector } from \"./advertisingIntegration\";\nimport { AlertService } from \"./alertService\";\nimport { eq, and, gte, desc } from \"drizzle-orm\";\n\nexport class DataSyncScheduler {\n  private static jobs: Map<string, cron.ScheduledTask> = new Map();\n\n  // 스케줄러 초기화\n  static initialize() {\n    console.log(\"Data sync scheduler 초기화 중...\");\n\n    // 1. 매 15분마다 주문 데이터 동기화\n    this.scheduleOrderSync();\n\n    // 2. 매 시간마다 광고 성과 데이터 동기화\n    this.scheduleAdPerformanceSync();\n\n    // 3. 매 30분마다 재고 알림 체크\n    this.scheduleInventoryCheck();\n\n    // 4. 매일 자정에 일간 리포트 생성\n    this.scheduleDailyReport();\n\n    console.log(\"모든 스케줄러 작업이 시작되었습니다.\");\n  }\n\n  // 주문 데이터 동기화 (매 15분)\n  private static scheduleOrderSync() {\n    const task = cron.schedule(\n      \"*/15 * * * *\",\n      async () => {\n        console.log(\"주문 데이터 동기화 시작...\");\n\n        try {\n          // 활성 회사 목록 조회\n          const companies = await db\n            .select()\n            .from(companies)\n            .where(eq(companies.isActive, true));\n\n          for (const company of companies) {\n            try {\n              const result = await OrderCollectionService.collectAllOrders(\n                company.id,\n              );\n\n              if (!result.success) {\n                console.error(\n                  `${company.name} 주문 동기화 실패:`,\n                  result.errors,\n                );\n              } else {\n                console.log(\n                  `${company.name} 주문 동기화 완료: ${result.ordersCollected}개 플랫폼`,\n                );\n              }\n            } catch (error) {\n              console.error(`${company.name} 주문 동기화 중 오류:`, error);\n            }\n          }\n        } catch (error) {\n          console.error(\"주문 동기화 스케줄러 오류:\", error);\n        }\n      },\n      {\n        scheduled: false,\n      },\n    );\n\n    this.jobs.set(\"orderSync\", task);\n    task.start();\n  }\n\n  // 광고 성과 데이터 동기화 (매 시간)\n  private static scheduleAdPerformanceSync() {\n    const task = cron.schedule(\n      \"0 * * * *\",\n      async () => {\n        console.log(\"광고 성과 데이터 동기화 시작...\");\n\n        try {\n          const today = new Date().toISOString().split(\"T\")[0];\n          const companies = await db\n            .select()\n            .from(companies)\n            .where(eq(companies.isActive, true));\n\n          for (const company of companies) {\n            try {\n              const result = await AdPerformanceCollector.collectAllAdData(\n                company.id,\n                today,\n                today,\n              );\n\n              // ROAS 임계치 확인\n              await AdPerformanceCollector.checkROASAlerts(company.id);\n\n              console.log(`${company.name} 광고 데이터 동기화 완료`);\n            } catch (error) {\n              console.error(`${company.name} 광고 동기화 중 오류:`, error);\n            }\n          }\n        } catch (error) {\n          console.error(\"광고 성과 동기화 스케줄러 오류:\", error);\n        }\n      },\n      {\n        scheduled: false,\n      },\n    );\n\n    this.jobs.set(\"adPerformanceSync\", task);\n    task.start();\n  }\n\n  // 재고 및 비즈니스 알림 체크 (매 30분)\n  private static scheduleInventoryCheck() {\n    const task = cron.schedule(\n      \"*/30 * * * *\",\n      async () => {\n        console.log(\"재고 및 알림 체크 시작...\");\n\n        try {\n          const companies = await db\n            .select()\n            .from(companies)\n            .where(eq(companies.isActive, true));\n\n          for (const company of companies) {\n            const settings = company.settings || {\n              alertThresholds: { lowStock: 10, cashFlow: 60, roas: 300 },\n            };\n\n            // 재고 부족 체크\n            await AlertService.checkLowStockAlerts(\n              company.id,\n              settings.alertThresholds,\n            );\n\n            // 현금흐름 체크 (Mock 데이터)\n            const remainingDays = await this.calculateCashFlowDays(company.id);\n            if (remainingDays < settings.alertThresholds.cashFlow) {\n              await AlertService.checkCashFlowAlerts(\n                company.id,\n                remainingDays,\n                settings.alertThresholds.cashFlow,\n              );\n            }\n\n            console.log(`${company.name} 알림 체크 완료`);\n          }\n        } catch (error) {\n          console.error(\"재고/알림 체크 스케줄러 오류:\", error);\n        }\n      },\n      {\n        scheduled: false,\n      },\n    );\n\n    this.jobs.set(\"inventoryCheck\", task);\n    task.start();\n  }\n\n  // 일간 리포트 생성 (매일 자정)\n  private static scheduleDailyReport() {\n    const task = cron.schedule(\n      \"0 0 * * *\",\n      async () => {\n        console.log(\"일간 리포트 생성 시작...\");\n\n        try {\n          const companies = await db\n            .select()\n            .from(companies)\n            .where(eq(companies.isActive, true));\n\n          for (const company of companies) {\n            await this.generateDailyReport(company.id, company.name);\n          }\n        } catch (error) {\n          console.error(\"일간 리포트 생성 오류:\", error);\n        }\n      },\n      {\n        scheduled: false,\n      },\n    );\n\n    this.jobs.set(\"dailyReport\", task);\n    task.start();\n  }\n\n  // 현금흐름 일수 계산 (실제로는 복잡한 계산 로직 필요)\n  private static async calculateCashFlowDays(\n    companyId: string,\n  ): Promise<number> {\n    try {\n      // 최근 30일 수입/지출 데이터 분석\n      const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n\n      // 주문 데이터에서 수입 계산\n      const recentOrders = await db\n        .select()\n        .from(orders)\n        .where(\n          and(\n            eq(orders.companyId, companyId),\n            gte(orders.orderDate, thirtyDaysAgo),\n          ),\n        );\n\n      const totalRevenue = recentOrders.reduce(\n        (sum, order) => sum + parseFloat(order.amount),\n        0,\n      );\n\n      const dailyRevenue = totalRevenue / 30;\n      const estimatedMonthlyCosts = dailyRevenue * 0.7; // 추정 70% 비용\n      const netCashFlow = dailyRevenue - estimatedMonthlyCosts / 30;\n\n      // 현재 현금 (Mock 데이터)\n      const currentCash = 180000000; // 1.8억원\n\n      return netCashFlow > 0\n        ? Math.floor(currentCash / (estimatedMonthlyCosts / 30))\n        : 30;\n    } catch (error) {\n      console.error(\"현금흐름 계산 오류:\", error);\n      return 120; // 기본값\n    }\n  }\n\n  // 일간 리포트 생성\n  private static async generateDailyReport(\n    companyId: string,\n    companyName: string,\n  ) {\n    try {\n      const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      const yesterdayStr = yesterday.toISOString().split(\"T\")[0];\n\n      // 어제 주문 수 집계\n      const yesterdayOrders = await db\n        .select()\n        .from(orders)\n        .where(\n          and(\n            eq(orders.companyId, companyId),\n            gte(orders.orderDate, yesterday),\n          ),\n        );\n\n      // 어제 광고 성과 집계\n      const yesterdayAdPerf = await db\n        .select()\n        .from(adPerformance)\n        .where(\n          and(\n            eq(adPerformance.companyId, companyId),\n            gte(adPerformance.date, yesterday),\n          ),\n        );\n\n      const totalRevenue = yesterdayOrders.reduce(\n        (sum, order) => sum + parseFloat(order.amount),\n        0,\n      );\n\n      const totalAdSpend = yesterdayAdPerf.reduce(\n        (sum, ad) => sum + parseFloat(ad.cost),\n        0,\n      );\n\n      const avgRoas =\n        yesterdayAdPerf.length > 0\n          ? yesterdayAdPerf.reduce((sum, ad) => sum + ad.roas, 0) /\n            yesterdayAdPerf.length\n          : 0;\n\n      // 일간 리포트 알림 생성\n      await AlertService.createAlert(companyId, {\n        type: \"daily_report\",\n        severity: \"info\",\n        title: \"일간 비즈니스 리포트\",\n        message: `\n          📊 ${companyName} 어제 성과 요약:\n          • 주문: ${yesterdayOrders.length}건, 매출: ₩${totalRevenue.toLocaleString()}\n          • 광고비: ₩${totalAdSpend.toLocaleString()}, 평균 ROAS: ${avgRoas.toFixed(1)}%\n          • 순수익: ₩${(totalRevenue - totalAdSpend).toLocaleString()}\n        `,\n        metadata: {\n          date: yesterdayStr,\n          orders: yesterdayOrders.length,\n          revenue: totalRevenue,\n          adSpend: totalAdSpend,\n          roas: avgRoas,\n        },\n      });\n\n      console.log(`${companyName} 일간 리포트 생성 완료`);\n    } catch (error) {\n      console.error(`${companyName} 일간 리포트 생성 오류:`, error);\n    }\n  }\n\n  // 특정 스케줄러 중지\n  static stopScheduler(jobName: string) {\n    const job = this.jobs.get(jobName);\n    if (job) {\n      job.stop();\n      this.jobs.delete(jobName);\n      console.log(`${jobName} 스케줄러가 중지되었습니다.`);\n    }\n  }\n\n  // 모든 스케줄러 중지\n  static stopAll() {\n    this.jobs.forEach((job, name) => {\n      job.stop();\n      console.log(`${name} 스케줄러 중지`);\n    });\n    this.jobs.clear();\n    console.log(\"모든 스케줄러가 중지되었습니다.\");\n  }\n\n  // 스케줄러 상태 조회\n  static getStatus() {\n    const status = {};\n    this.jobs.forEach((job, name) => {\n      status[name] = {\n        running: job.getStatus() === \"scheduled\",\n        nextRun: job.nextDate()?.toISOString(),\n      };\n    });\n    return status;\n  }\n}\n\n// server/routes/scheduler.ts - 스케줄러 관리 API\nimport { Router } from \"express\";\nimport { DataSyncScheduler } from \"../services/dataScheduler\";\n\nconst router = Router();\n\n// 스케줄러 상태 조회\nrouter.get(\"/status\", (req, res) => {\n  try {\n    const status = DataSyncScheduler.getStatus();\n    res.json({ success: true, schedulers: status });\n  } catch (error) {\n    res.status(500).json({ message: \"스케줄러 상태 조회 실패\" });\n  }\n});\n\n// 특정 스케줄러 재시작\nrouter.post(\"/restart/:jobName\", (req, res) => {\n  try {\n    const { jobName } = req.params;\n    DataSyncScheduler.stopScheduler(jobName);\n\n    // 개별 스케줄러 재시작 로직\n    switch (jobName) {\n      case \"orderSync\":\n        // 주문 동기화 재시작\n        break;\n      case \"adPerformanceSync\":\n        // 광고 성과 동기화 재시작\n        break;\n      default:\n        return res\n          .status(400)\n          .json({ message: \"지원하지 않는 스케줄러입니다.\" });\n    }\n\n    res.json({\n      success: true,\n      message: `${jobName} 스케줄러가 재시작되었습니다.`,\n    });\n  } catch (error) {\n    res.status(500).json({ message: \"스케줄러 재시작 실패\" });\n  }\n});\n\n// 수동 데이터 동기화 트리거\nrouter.post(\"/trigger/:type\", async (req, res) => {\n  try {\n    const { type } = req.params;\n    const { companyId } = req.body;\n\n    switch (type) {\n      case \"orders\":\n        const orderResult =\n          await OrderCollectionService.collectAllOrders(companyId);\n        res.json({ success: true, result: orderResult });\n        break;\n\n      case \"ads\":\n        const today = new Date().toISOString().split(\"T\")[0];\n        const adResult = await AdPerformanceCollector.collectAllAdData(\n          companyId,\n          today,\n          today,\n        );\n        res.json({ success: true, result: adResult });\n        break;\n\n      default:\n        res.status(400).json({ message: \"지원하지 않는 동기화 타입입니다.\" });\n    }\n  } catch (error) {\n    res.status(500).json({ message: \"수동 동기화 실패\", error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":12167},"client/src/pages/customer-service-behavior.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Users, Clock, MessageSquare, BarChart3 } from \"lucide-react\";\n\nexport default function CustomerServiceBehavior() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/customer-service\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            고객 인텔리전스 허브로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-green-500/10 rounded-full mb-4\">\n            <Users className=\"w-8 h-8 text-green-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">고객 행동 분석</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            요일/시간대/성별/연령별 문의량 및 주제별 분포 분석\n          </p>\n        </div>\n\n        {/* Behavior Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-peak-hours\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">피크 시간대</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">14:00-16:00</div>\n              <p className=\"text-xs text-muted-foreground\">가장 바쁜 시간</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-busiest-day\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">최고 문의일</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">월요일</div>\n              <p className=\"text-xs text-muted-foreground\">주간 문의량 32%</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-top-age-group\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">주요 연령층</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">30-40대</div>\n              <p className=\"text-xs text-muted-foreground\">전체 문의의 45%</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-top-topic\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MessageSquare className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">주요 문의 주제</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">기술 지원</div>\n              <p className=\"text-xs text-muted-foreground\">전체 문의의 38%</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Behavior Analysis Charts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-inquiry-heatmap\">\n            <CardHeader>\n              <CardTitle>문의량 히트맵</CardTitle>\n              <CardDescription>\n                시간대별, 요일별 문의량 분포\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">문의량 히트맵 차트</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-demographic-analysis\">\n              <CardHeader>\n                <CardTitle>인구통계별 분석</CardTitle>\n                <CardDescription>\n                  연령, 성별, 지역별 문의 패턴\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">인구통계 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-topic-distribution\">\n              <CardHeader>\n                <CardTitle>주제별 분포</CardTitle>\n                <CardDescription>\n                  문의 주제 카테고리별 비율 및 트렌드\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">주제별 분포 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card data-testid=\"card-channel-preferences\">\n            <CardHeader>\n              <CardTitle>채널 선호도</CardTitle>\n              <CardDescription>\n                연령대별, 문의 유형별 선호 채널 분석\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">채널 선호도 분석</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6227},"client/src/pages/customer-service-impact.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, DollarSign, TrendingUp, Users, ShoppingCart } from \"lucide-react\";\n\nexport default function CustomerServiceImpact() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/customer-service\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            고객 인텔리전스 허브로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-amber-500/10 rounded-full mb-4\">\n            <DollarSign className=\"w-8 h-8 text-amber-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">비즈니스 임팩트</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            AOV 트렌드, CLV 계산 및 비즈니스 지표 분석\n          </p>\n        </div>\n\n        {/* Impact Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-average-order-value\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <ShoppingCart className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">평균 객단가</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">₩187,340</div>\n              <p className=\"text-xs text-muted-foreground\">전월 대비 +12.4%</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-customer-lifetime-value\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">고객 생애가치</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">₩2,347,000</div>\n              <p className=\"text-xs text-muted-foreground\">평균 CLV</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-revenue-per-customer\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">고객당 매출</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">₩524,800</div>\n              <p className=\"text-xs text-muted-foreground\">연간 기준</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-profit-margin\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <DollarSign className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">수익률</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">28.7%</div>\n              <p className=\"text-xs text-muted-foreground\">순수익률</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Business Impact Analysis Charts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-aov-trends\">\n            <CardHeader>\n              <CardTitle>객단가 트렌드</CardTitle>\n              <CardDescription>\n                월별, 분기별 평균 객단가 변화 분석\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">객단가 트렌드 차트</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-clv-analysis\">\n              <CardHeader>\n                <CardTitle>고객 생애가치 분석</CardTitle>\n                <CardDescription>\n                  세그먼트별 CLV 분포 및 예측\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">CLV 분석 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-revenue-attribution\">\n              <CardHeader>\n                <CardTitle>매출 기여도</CardTitle>\n                <CardDescription>\n                  채널별, 캠페인별 매출 기여 분석\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">매출 기여도 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-profit-analysis\">\n              <CardHeader>\n                <CardTitle>수익성 분석</CardTitle>\n                <CardDescription>\n                  제품별, 고객 세그먼트별 수익성\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">수익성 분석 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-roi-metrics\">\n              <CardHeader>\n                <CardTitle>ROI 지표</CardTitle>\n                <CardDescription>\n                  마케팅 투자 대비 수익률 분석\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">ROI 지표 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6870},"client/src/pages/customer-service-lifecycle.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, RotateCcw, UserPlus, Repeat, TrendingUp } from \"lucide-react\";\n\nexport default function CustomerServiceLifecycle() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/customer-service\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            고객 인텔리전스 허브로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-purple-500/10 rounded-full mb-4\">\n            <RotateCcw className=\"w-8 h-8 text-purple-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">고객 생애주기</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            신규 vs 재방문 고객 분석 및 재구매 패턴\n          </p>\n        </div>\n\n        {/* Lifecycle Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-new-customers\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <UserPlus className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">신규 고객</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">1,247</div>\n              <p className=\"text-xs text-muted-foreground\">이번 달 신규 등록</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-returning-customers\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Repeat className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">재방문 고객</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">2,891</div>\n              <p className=\"text-xs text-muted-foreground\">이번 달 재방문</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-repurchase-rate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">재구매율</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">68.3%</div>\n              <p className=\"text-xs text-muted-foreground\">지난 분기 기준</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-churn-rate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <RotateCcw className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">이탈률</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">12.7%</div>\n              <p className=\"text-xs text-muted-foreground\">월간 이탈률</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lifecycle Analysis Charts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-lifecycle-funnel\">\n            <CardHeader>\n              <CardTitle>고객 생애주기 퍼널</CardTitle>\n              <CardDescription>\n                신규 → 재구매 → 충성고객 전환 과정\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">생애주기 퍼널 차트</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-cohort-analysis\">\n              <CardHeader>\n                <CardTitle>코호트 분석</CardTitle>\n                <CardDescription>\n                  월별 신규 고객 그룹의 재구매 패턴\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">코호트 분석 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-product-repurchase\">\n              <CardHeader>\n                <CardTitle>제품별 재구매율</CardTitle>\n                <CardDescription>\n                  카테고리별, 제품별 재구매 패턴\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">제품별 재구매 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card data-testid=\"card-customer-journey\">\n            <CardHeader>\n              <CardTitle>고객 여정 분석</CardTitle>\n              <CardDescription>\n                터치포인트별 고객 이동 경로 및 이탈 지점\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">고객 여정 맵</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6218},"client/src/pages/customer-service-performance.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Phone, TrendingUp, Clock, Target } from \"lucide-react\";\n\nexport default function CustomerServicePerformance() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/customer-service\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            고객 인텔리전스 허브로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-500/10 rounded-full mb-4\">\n            <Phone className=\"w-8 h-8 text-blue-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">서비스 성과</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            CS 지표 및 응답 시간 분석\n          </p>\n        </div>\n\n        {/* Performance Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card data-testid=\"card-satisfaction-score\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-lg\">고객 만족도</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">4.2/5</div>\n              <p className=\"text-sm text-muted-foreground\">지난 달 대비 +0.3 향상</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-response-time\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-lg\">평균 응답 시간</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">4.2시간</div>\n              <p className=\"text-sm text-muted-foreground\">목표: 2시간 이내</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-resolution-rate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-lg\">해결률</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-purple-600 mb-2\">78%</div>\n              <p className=\"text-sm text-muted-foreground\">1차 해결률 기준</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Placeholder for Charts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-performance-trends\">\n            <CardHeader>\n              <CardTitle>성과 트렌드 분석</CardTitle>\n              <CardDescription>\n                시간별, 일별, 월별 CS 성과 지표 분석\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">성과 트렌드 차트 영역</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-response-time-analysis\">\n              <CardHeader>\n                <CardTitle>응답 시간 분석</CardTitle>\n                <CardDescription>\n                  시간대별, 요일별 응답 시간 패턴\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">응답 시간 히트맵</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-agent-performance\">\n              <CardHeader>\n                <CardTitle>상담원 성과</CardTitle>\n                <CardDescription>\n                  개별 상담원 성과 지표 및 순위\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">상담원 성과 랭킹</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5062},"client/src/pages/growth-events.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Calendar, MapPin, Users, TrendingUp } from \"lucide-react\";\n\nexport default function GrowthEvents() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/growth\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            성장 리포트로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-green-500/10 rounded-full mb-4\">\n            <Calendar className=\"w-8 h-8 text-green-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">시장 이벤트</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            박람회, 팝업, 오프라인 이벤트 캘린더 관리\n          </p>\n        </div>\n\n        {/* Events Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-upcoming-events\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">예정 이벤트</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">12</div>\n              <p className=\"text-xs text-muted-foreground\">이번 달 예정</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-trade-shows\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">박람회</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">5</div>\n              <p className=\"text-xs text-muted-foreground\">참가 예정</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-popup-stores\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">팝업 스토어</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">8</div>\n              <p className=\"text-xs text-muted-foreground\">운영 중</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-event-roi\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">이벤트 ROI</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">340%</div>\n              <p className=\"text-xs text-muted-foreground\">평균 투자 수익률</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Event Management */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-event-calendar\">\n            <CardHeader>\n              <CardTitle>이벤트 캘린더</CardTitle>\n              <CardDescription>\n                월별 이벤트 일정 및 운영 계획\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">이벤트 캘린더</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-event-performance\">\n              <CardHeader>\n                <CardTitle>이벤트 성과</CardTitle>\n                <CardDescription>\n                  이벤트별 방문자 수, 매출, 리드 생성\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">성과 분석 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-location-analysis\">\n              <CardHeader>\n                <CardTitle>지역별 분석</CardTitle>\n                <CardDescription>\n                  지역별 이벤트 효과 및 최적 위치\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">지역별 히트맵</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-upcoming-tradeshows\">\n              <CardHeader>\n                <CardTitle>예정 박람회</CardTitle>\n                <CardDescription>참가 예정 박람회 리스트</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold\">서울 국제 전시회</h4>\n                    <p className=\"text-sm text-muted-foreground\">12월 15-18일 • COEX</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold\">부산 테크 박람회</h4>\n                    <p className=\"text-sm text-muted-foreground\">1월 20-22일 • BEXCO</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-popup-management\">\n              <CardHeader>\n                <CardTitle>팝업 관리</CardTitle>\n                <CardDescription>현재 운영 중인 팝업</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold\">강남 팝업</h4>\n                    <p className=\"text-sm text-muted-foreground\">12월 1-31일 • 일 평균 120명</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold\">홍대 팝업</h4>\n                    <p className=\"text-sm text-muted-foreground\">11월 15-12월 15일 • 일 평균 98명</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-event-planning\">\n              <CardHeader>\n                <CardTitle>이벤트 기획</CardTitle>\n                <CardDescription>신규 이벤트 계획</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-new-event\">\n                    새 이벤트 등록\n                  </Button>\n                  <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-schedule-popup\">\n                    팝업 일정 계획\n                  </Button>\n                  <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-venue-analysis\">\n                    장소 분석 요청\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8331},"client/src/pages/growth-forecast.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, CloudRain, TrendingUp, Thermometer, Umbrella } from \"lucide-react\";\n\nexport default function GrowthForecast() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/growth\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            성장 리포트로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-blue-500/10 rounded-full mb-4\">\n            <CloudRain className=\"w-8 h-8 text-blue-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">날씨 및 예측</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            날씨 조정 예측 및 매출 영향 분석\n          </p>\n        </div>\n\n        {/* Weather Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-current-weather\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Thermometer className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">현재 날씨</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">🌤️ 22°C</div>\n              <p className=\"text-xs text-muted-foreground\">구름 조금, 습도 65%</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-weekly-outlook\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <CloudRain className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">주간 전망</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">🌧️ 비 예상</div>\n              <p className=\"text-xs text-muted-foreground\">목-금 강우 확률 80%</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-sales-impact\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">매출 영향</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">-12%</div>\n              <p className=\"text-xs text-muted-foreground\">우천 시 예상 감소</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-recommendation\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Umbrella className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">추천 대응</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">📱 온라인</div>\n              <p className=\"text-xs text-muted-foreground\">디지털 마케팅 강화</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Weather Analysis Charts */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-weather-forecast\">\n            <CardHeader>\n              <CardTitle>7일 날씨 예보</CardTitle>\n              <CardDescription>\n                일별 날씨 변화 및 매출 예측 조정\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">날씨 예보 차트</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-weather-sales-correlation\">\n              <CardHeader>\n                <CardTitle>날씨-매출 상관관계</CardTitle>\n                <CardDescription>\n                  날씨 변화에 따른 매출 패턴 분석\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">상관관계 분석 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-seasonal-trends\">\n              <CardHeader>\n                <CardTitle>계절별 트렌드</CardTitle>\n                <CardDescription>\n                  계절 변화에 따른 비즈니스 영향도\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                  <p className=\"text-muted-foreground\">계절별 트렌드 차트</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card data-testid=\"card-predictive-model\">\n            <CardHeader>\n              <CardTitle>예측 모델</CardTitle>\n              <CardDescription>\n                AI 기반 날씨-매출 예측 알고리즘\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-48 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">예측 모델 대시보드</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6210},"client/src/pages/growth-intelligence.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Newspaper, TrendingUp, Building2, Globe } from \"lucide-react\";\n\nexport default function GrowthIntelligence() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/growth\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            성장 리포트로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-purple-500/10 rounded-full mb-4\">\n            <Newspaper className=\"w-8 h-8 text-purple-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">산업 인텔리전스</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            업계 업데이트, 경쟁사 뉴스, 시장 트렌드 분석\n          </p>\n        </div>\n\n        {/* Intelligence Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-daily-news\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Newspaper className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">오늘의 뉴스</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">24</div>\n              <p className=\"text-xs text-muted-foreground\">새로운 업계 뉴스</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-competitor-updates\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Building2 className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">경쟁사 동향</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">8</div>\n              <p className=\"text-xs text-muted-foreground\">주요 업데이트</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-market-trends\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">시장 트렌드</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">↗️ 12%</div>\n              <p className=\"text-xs text-muted-foreground\">산업 성장률</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-global-impact\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Globe className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">글로벌 영향</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">🌐 High</div>\n              <p className=\"text-xs text-muted-foreground\">국제 시장 연동성</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Intelligence Dashboard */}\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-news-feed\">\n              <CardHeader>\n                <CardTitle>실시간 뉴스 피드</CardTitle>\n                <CardDescription>\n                  업계 주요 뉴스 및 이슈 모니터링\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold text-sm\">AI 기술 혁신, 업계 판도 변화 예고</h4>\n                    <p className=\"text-xs text-muted-foreground\">TechNews • 2시간 전</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold text-sm\">글로벌 공급망 재편, 새로운 기회 창출</h4>\n                    <p className=\"text-xs text-muted-foreground\">Business Today • 4시간 전</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold text-sm\">ESG 경영 강화, 지속가능 성장 화두</h4>\n                    <p className=\"text-xs text-muted-foreground\">Green Business • 6시간 전</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <h4 className=\"font-semibold text-sm\">디지털 전환 가속화, 새로운 비즈니스 모델</h4>\n                    <p className=\"text-xs text-muted-foreground\">Digital Weekly • 8시간 전</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-competitor-analysis\">\n              <CardHeader>\n                <CardTitle>경쟁사 분석</CardTitle>\n                <CardDescription>\n                  주요 경쟁사 동향 및 전략 분석\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <h4 className=\"font-semibold\">Company A</h4>\n                      <span className=\"text-green-600 text-sm\">+5.2%</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">신제품 출시로 시장 점유율 상승</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <h4 className=\"font-semibold\">Company B</h4>\n                      <span className=\"text-red-600 text-sm\">-2.1%</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">공급망 이슈로 매출 감소</p>\n                  </div>\n                  <div className=\"p-3 bg-muted/20 rounded-lg\">\n                    <div className=\"flex justify-between items-center\">\n                      <h4 className=\"font-semibold\">Company C</h4>\n                      <span className=\"text-blue-600 text-sm\">+8.7%</span>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground\">M&A를 통한 사업 확장</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card data-testid=\"card-market-intelligence\">\n            <CardHeader>\n              <CardTitle>시장 인텔리전스</CardTitle>\n              <CardDescription>\n                산업 트렌드 및 시장 기회 분석\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/20 rounded-lg flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">시장 트렌드 분석 차트</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-trend-alerts\">\n              <CardHeader>\n                <CardTitle>트렌드 알림</CardTitle>\n                <CardDescription>키워드 기반 트렌드 모니터링</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">AI & 머신러닝</span>\n                    <span className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded\">🔥 HOT</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">지속가능성</span>\n                    <span className=\"text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded\">📈 UP</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">디지털 전환</span>\n                    <span className=\"text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded\">⚡ FAST</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-industry-reports\">\n              <CardHeader>\n                <CardTitle>산업 리포트</CardTitle>\n                <CardDescription>전문 분석 리포트 요약</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-quarterly-report\">\n                    분기별 산업 동향\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-tech-forecast\">\n                    기술 발전 전망\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-market-analysis\">\n                    시장 분석 보고서\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-sentiment-analysis\">\n              <CardHeader>\n                <CardTitle>감성 분석</CardTitle>\n                <CardDescription>시장 심리 및 감성 지표</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl mb-2\">😊</div>\n                  <div className=\"text-lg font-semibold text-green-600\">긍정적</div>\n                  <p className=\"text-xs text-muted-foreground\">전체 시장 심리 지수: 72/100</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10815},"client/src/pages/growth-motivation.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Star, Heart, Target, Zap } from \"lucide-react\";\n\nexport default function GrowthMotivation() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/growth\">\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-hub\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            성장 리포트로 돌아가기\n          </Button>\n        </Link>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-16 h-16 bg-amber-500/10 rounded-full mb-4\">\n            <Star className=\"w-8 h-8 text-amber-500\" />\n          </div>\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-page-title\">응원 격려</h1>\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-page-description\">\n            오늘의 운세, 올해 사주, 팀 격려 메시지\n          </p>\n        </div>\n\n        {/* Motivation Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"card-daily-fortune\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Star className=\"w-5 h-5 text-blue-500\" />\n                <CardTitle className=\"text-sm\">오늘의 운세</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">⭐⭐⭐⭐</div>\n              <p className=\"text-xs text-muted-foreground\">좋은 하루가 될 것</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-lucky-color\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Heart className=\"w-5 h-5 text-green-500\" />\n                <CardTitle className=\"text-sm\">행운의 색깔</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">🟦 파랑</div>\n              <p className=\"text-xs text-muted-foreground\">안정과 신뢰의 색</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-team-energy\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Zap className=\"w-5 h-5 text-purple-500\" />\n                <CardTitle className=\"text-sm\">팀 에너지</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-600 mb-1\">⚡ 92%</div>\n              <p className=\"text-xs text-muted-foreground\">높은 팀 활력도</p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-success-rate\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"w-5 h-5 text-amber-500\" />\n                <CardTitle className=\"text-sm\">성공 확률</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-amber-600 mb-1\">🎯 85%</div>\n              <p className=\"text-xs text-muted-foreground\">목표 달성 가능성</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Motivation Content */}\n        <div className=\"space-y-6\">\n          <Card data-testid=\"card-daily-message\">\n            <CardHeader>\n              <CardTitle>오늘의 격려 메시지</CardTitle>\n              <CardDescription>\n                하루를 시작하는 긍정적인 메시지\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center p-8 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg\">\n                <div className=\"text-4xl mb-4\">🌟</div>\n                <blockquote className=\"text-lg font-semibold text-gray-800 mb-4\">\n                  \"성공의 비밀은 시작하는 것이다. 시작하는 비밀은 복잡한 일을 작은 단위로 나누어 하나씩 시작하는 것이다.\"\n                </blockquote>\n                <p className=\"text-sm text-muted-foreground\">- 마크 트웨인</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card data-testid=\"card-fortune-details\">\n              <CardHeader>\n                <CardTitle>상세 운세</CardTitle>\n                <CardDescription>\n                  오늘의 세부 운세 및 조언\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <h4 className=\"font-semibold text-blue-800 mb-2\">💼 사업운</h4>\n                    <p className=\"text-sm text-blue-700\">새로운 기회가 찾아올 징조가 있습니다. 적극적인 자세로 임하세요.</p>\n                  </div>\n                  <div className=\"p-4 bg-green-50 rounded-lg\">\n                    <h4 className=\"font-semibold text-green-800 mb-2\">💰 재물운</h4>\n                    <p className=\"text-sm text-green-700\">예상치 못한 수익이 생길 가능성이 높습니다. 신중한 투자를 고려해보세요.</p>\n                  </div>\n                  <div className=\"p-4 bg-purple-50 rounded-lg\">\n                    <h4 className=\"font-semibold text-purple-800 mb-2\">🤝 인간관계</h4>\n                    <p className=\"text-sm text-purple-700\">동료와의 협력이 좋은 결과를 가져다줄 것입니다. 소통을 늘려보세요.</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-yearly-fortune\">\n              <CardHeader>\n                <CardTitle>2024년 사주</CardTitle>\n                <CardDescription>\n                  올해 전체 운세 및 주요 이벤트\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-600 mb-2\">갑진년 청룡의 해</div>\n                    <p className=\"text-sm text-orange-700\">변화와 도전의 해, 새로운 시작에 적합한 한 해</p>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-3 bg-red-50 rounded-lg\">\n                      <div className=\"font-semibold text-red-600\">상반기</div>\n                      <p className=\"text-xs text-red-700\">기반 다지기</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                      <div className=\"font-semibold text-blue-600\">하반기</div>\n                      <p className=\"text-xs text-blue-700\">성과 수확</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-team-messages\">\n              <CardHeader>\n                <CardTitle>팀 격려 메시지</CardTitle>\n                <CardDescription>동료들을 위한 응원</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"p-3 bg-pink-50 rounded-lg\">\n                    <p className=\"text-sm font-semibold\">🎉 김팀장님, 프로젝트 성공 축하드려요!</p>\n                  </div>\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <p className=\"text-sm font-semibold\">💪 이번 주도 모두 화이팅!</p>\n                  </div>\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm font-semibold\">🌟 새로운 도전을 응원합니다!</p>\n                  </div>\n                </div>\n                <Button className=\"w-full mt-3\" variant=\"outline\" data-testid=\"button-send-message\">\n                  격려 메시지 보내기\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-goal-tracker\">\n              <CardHeader>\n                <CardTitle>목표 추적</CardTitle>\n                <CardDescription>개인 및 팀 목표 현황</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">월간 매출 목표</span>\n                    <span className=\"text-green-600 font-semibold\">87%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-green-600 h-2 rounded-full\" style={{width: '87%'}}></div>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">개인 성장 목표</span>\n                    <span className=\"text-blue-600 font-semibold\">92%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div className=\"bg-blue-600 h-2 rounded-full\" style={{width: '92%'}}></div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-mood-tracker\">\n              <CardHeader>\n                <CardTitle>기분 추적</CardTitle>\n                <CardDescription>일일 기분 및 에너지 레벨</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center\">\n                  <div className=\"text-6xl mb-4\">😊</div>\n                  <div className=\"text-lg font-semibold mb-2\">좋음</div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">오늘 기분 점수: 8/10</p>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-mood-happy\">😊</Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-mood-neutral\">😐</Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-mood-sad\">😔</Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11125},"server/services/econnerce/coupangAPI.ts":{"content":"// artifact의 CoupangAPI 클래스 부분을 복사\n","size_bytes":53},"server/services/econnerce/realOrderCollector.ts":{"content":"// artifact의 RealOrderCollector 클래스 부분을 복사\n","size_bytes":61},"server/services/econnerce/smartstoreAPI.ts":{"content":"// artifact의 SmartStoreAPI 클래스 부분을 복사\n","size_bytes":56},"server/services/econnerce/types.ts":{"content":"","size_bytes":0},"client/src/pages/ecommerce/inventory.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ChevronRight, BarChart3, Construction } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Inventory() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center text-sm text-muted-foreground mb-2\" data-testid=\"breadcrumb-inventory\">\n            <Link href=\"/ecommerce\" className=\"hover:text-foreground\">이커머스 관리</Link>\n            <ChevronRight className=\"w-4 h-4 mx-2\" />\n            <span className=\"text-foreground\">재고 관리</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/ecommerce\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-inventory\">\n              재고 관리\n            </h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\" data-testid=\"card-placeholder\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <BarChart3 className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-xl\" data-testid=\"heading-placeholder\">재고 관리 시스템</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center text-amber-500 mb-2\">\n              <Construction className=\"w-5 h-5 mr-2\" />\n              <span className=\"text-sm font-medium\">준비 중</span>\n            </div>\n            <p className=\"text-muted-foreground\" data-testid=\"text-placeholder-description\">\n              실시간 재고 추적, 자동 알림, 예측 분석 기능을 준비하고 있습니다.\n            </p>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                12개 낮은 재고 알림 대기 중\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                94% 전체 재고 보유율\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                스마트 재고 예측 모델 구축 중\n              </div>\n            </div>\n            <Link href=\"/ecommerce\">\n              <Button className=\"mt-4\" data-testid=\"button-back-to-hub-main\">\n                허브로 돌아가기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3375},"client/src/pages/ecommerce/orders.tsx":{"content":"// pages/ecommerce/orders.tsx\nimport React, { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport {\n  RefreshCw,\n  Package,\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Download,\n  Filter,\n} from \"lucide-react\";\n\ninterface Order {\n  platform: string;\n  status: string;\n  sellerId?: string;\n}\n\ninterface CollectionResult {\n  success: boolean;\n  message: string;\n  ordersCollected: number;\n  orders: Order[];\n  errors: any[];\n  timestamp: string;\n}\n\nexport default function EcommerceOrders() {\n  const [isCollecting, setIsCollecting] = useState(false);\n  const [collectionResult, setCollectionResult] =\n    useState<CollectionResult | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n\n  // 실제 주문 수집 함수\n  const handleCollectOrders = async () => {\n    setIsCollecting(true);\n\n    try {\n      const response = await fetch(\"/api/ecommerce/collect-real-orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const result = await response.json();\n      setCollectionResult(result);\n      setLastUpdated(new Date());\n\n      console.log(\"주문 수집 결과:\", result);\n    } catch (error) {\n      console.error(\"주문 수집 실패:\", error);\n      setCollectionResult({\n        success: false,\n        message: \"주문 수집 중 오류가 발생했습니다\",\n        ordersCollected: 0,\n        orders: [],\n        errors: [{ platform: \"system\", error: error.message }],\n        timestamp: new Date().toISOString(),\n      });\n    } finally {\n      setIsCollecting(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 페이지 헤더 */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">주문 관리</h1>\n          <p className=\"text-muted-foreground\">\n            모든 플랫폼의 주문을 통합 관리하세요\n          </p>\n        </div>\n\n        {/* 주문 수집 버튼 */}\n        <Button\n          onClick={handleCollectOrders}\n          disabled={isCollecting}\n          className=\"gap-2\"\n          size=\"lg\"\n        >\n          {isCollecting ? (\n            <RefreshCw className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <Package className=\"h-4 w-4\" />\n          )}\n          {isCollecting ? \"수집 중...\" : \"실시간 주문 수집\"}\n        </Button>\n      </div>\n\n      {/* 마지막 업데이트 시간 */}\n      {lastUpdated && (\n        <div className=\"text-sm text-muted-foreground\">\n          마지막 업데이트: {lastUpdated.toLocaleString(\"ko-KR\")}\n        </div>\n      )}\n\n      {/* 수집 결과 표시 */}\n      {collectionResult && (\n        <Alert variant={collectionResult.success ? \"default\" : \"destructive\"}>\n          <CheckCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            <div className=\"space-y-2\">\n              <p className=\"font-semibold\">{collectionResult.message}</p>\n              <p>수집된 플랫폼: {collectionResult.ordersCollected}개</p>\n              {collectionResult.errors.length > 0 && (\n                <p className=\"text-red-500\">\n                  오류 발생: {collectionResult.errors.length}개 플랫폼\n                </p>\n              )}\n            </div>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* 플랫폼별 연결 상태 */}\n      {collectionResult && collectionResult.orders.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {collectionResult.orders.map((order, index) => (\n            <Card key={index}>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center justify-between text-base\">\n                  <span className=\"capitalize\">{order.platform}</span>\n                  <Badge variant=\"secondary\">\n                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                    연결됨\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2 text-sm\">\n                  <p>\n                    <strong>상태:</strong> {order.status}\n                  </p>\n                  {order.sellerId && (\n                    <p>\n                      <strong>판매자 ID:</strong> {order.sellerId}\n                    </p>\n                  )}\n                  <p className=\"text-green-600\">실제 주문 데이터 준비 완료</p>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* 오류 발생한 플랫폼 */}\n      {collectionResult && collectionResult.errors.length > 0 && (\n        <Card className=\"border-red-200\">\n          <CardHeader>\n            <CardTitle className=\"text-red-600 flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              연결 오류\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {collectionResult.errors.map((error, index) => (\n                <div key={index} className=\"p-3 bg-red-50 rounded-lg\">\n                  <p className=\"font-semibold text-red-700 capitalize\">\n                    {error.platform}\n                  </p>\n                  <p className=\"text-sm text-red-600\">{error.error}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 주문 데이터 테이블 (향후 구현) */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>주문 내역</span>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                필터\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                내보내기\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {collectionResult ? (\n            <div className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">\n                주문 데이터 준비 완료\n              </h3>\n              <p className=\"text-muted-foreground\">\n                실제 주문 데이터 조회 기능을 곧 추가할 예정입니다.\n              </p>\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                현재 {collectionResult.ordersCollected}개 플랫폼이\n                연결되었습니다.\n              </p>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Clock className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">\n                주문 데이터 대기 중\n              </h3>\n              <p className=\"text-muted-foreground\">\n                \"실시간 주문 수집\" 버튼을 클릭하여 주문 데이터를 가져오세요.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* 수집 통계 */}\n      {collectionResult && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {collectionResult.ordersCollected}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">\n                  연결된 플랫폼\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {collectionResult.errors.length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">연결 오류</div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">0</div>\n                <div className=\"text-sm text-muted-foreground\">수집된 주문</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  (곧 구현 예정)\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// client/hooks/useOrderCollection.ts - 주문 수집 관련 커스텀 훅\nexport function useOrderCollection() {\n  const [isCollecting, setIsCollecting] = useState(false);\n  const [result, setResult] = useState<CollectionResult | null>(null);\n\n  const collectOrders = async () => {\n    setIsCollecting(true);\n\n    try {\n      const response = await fetch(\"/api/ecommerce/collect-real-orders\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n\n      const data = await response.json();\n      setResult(data);\n      return data;\n    } catch (error) {\n      const errorResult = {\n        success: false,\n        message: \"주문 수집 실패\",\n        ordersCollected: 0,\n        orders: [],\n        errors: [{ platform: \"system\", error: error.message }],\n        timestamp: new Date().toISOString(),\n      };\n      setResult(errorResult);\n      return errorResult;\n    } finally {\n      setIsCollecting(false);\n    }\n  };\n\n  return {\n    isCollecting,\n    result,\n    collectOrders,\n  };\n}\n","size_bytes":10015},"client/src/pages/ecommerce/packaging.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ChevronRight, Ruler, Construction } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Packaging() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center text-sm text-muted-foreground mb-2\" data-testid=\"breadcrumb-packaging\">\n            <Link href=\"/ecommerce\" className=\"hover:text-foreground\">이커머스 관리</Link>\n            <ChevronRight className=\"w-4 h-4 mx-2\" />\n            <span className=\"text-foreground\">포장 최적화</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/ecommerce\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-packaging\">\n              포장 최적화\n            </h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\" data-testid=\"card-placeholder\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Ruler className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-xl\" data-testid=\"heading-placeholder\">포장 최적화 시스템</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center text-amber-500 mb-2\">\n              <Construction className=\"w-5 h-5 mr-2\" />\n              <span className=\"text-sm font-medium\">준비 중</span>\n            </div>\n            <p className=\"text-muted-foreground\" data-testid=\"text-placeholder-description\">\n              AI 기반 포장 최적화, 박스 크기 추천, 비용 절감 분석 기능을 준비하고 있습니다.\n            </p>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                현재 87% 포장 효율성\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                234개 박스 최적화 필요\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                스마트 포장 알고리즘 개발 중\n              </div>\n            </div>\n            <Link href=\"/ecommerce\">\n              <Button className=\"mt-4\" data-testid=\"button-back-to-hub-main\">\n                허브로 돌아가기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3385},"client/src/pages/ecommerce/procurement.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ChevronRight, ShoppingCart, Construction } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Procurement() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center text-sm text-muted-foreground mb-2\" data-testid=\"breadcrumb-procurement\">\n            <Link href=\"/ecommerce\" className=\"hover:text-foreground\">이커머스 관리</Link>\n            <ChevronRight className=\"w-4 h-4 mx-2\" />\n            <span className=\"text-foreground\">발주 관리</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/ecommerce\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-procurement\">\n              발주 관리\n            </h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\" data-testid=\"card-placeholder\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <ShoppingCart className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-xl\" data-testid=\"heading-placeholder\">발주 관리 시스템</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center text-amber-500 mb-2\">\n              <Construction className=\"w-5 h-5 mr-2\" />\n              <span className=\"text-sm font-medium\">준비 중</span>\n            </div>\n            <p className=\"text-muted-foreground\" data-testid=\"text-placeholder-description\">\n              자동 발주, 공급업체 관리, 원가 최적화 기능을 준비하고 있습니다.\n            </p>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                8개 원자재 임계치 이하\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                3건 발주 승인 대기 중\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                스마트 발주 시스템 구축 중\n              </div>\n            </div>\n            <Link href=\"/ecommerce\">\n              <Button className=\"mt-4\" data-testid=\"button-back-to-hub-main\">\n                허브로 돌아가기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3378},"client/src/pages/ecommerce/sku-analytics.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ChevronRight, Tag, Construction } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function SkuAnalytics() {\n  return (\n    <div className=\"space-y-8\">\n      {/* Page Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <div className=\"flex items-center text-sm text-muted-foreground mb-2\" data-testid=\"breadcrumb-sku-analytics\">\n            <Link href=\"/ecommerce\" className=\"hover:text-foreground\">이커머스 관리</Link>\n            <ChevronRight className=\"w-4 h-4 mx-2\" />\n            <span className=\"text-foreground\">SKU 분석</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Link href=\"/ecommerce\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-to-hub\">\n                <ArrowLeft className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"heading-sku-analytics\">\n              SKU 분석\n            </h1>\n          </div>\n        </div>\n      </div>\n\n      {/* Placeholder Content */}\n      <div className=\"flex flex-col items-center justify-center min-h-[400px]\">\n        <Card className=\"w-full max-w-md\" data-testid=\"card-placeholder\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Tag className=\"w-8 h-8 text-primary\" />\n            </div>\n            <CardTitle className=\"text-xl\" data-testid=\"heading-placeholder\">SKU 분석 시스템</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"flex items-center justify-center text-amber-500 mb-2\">\n              <Construction className=\"w-5 h-5 mr-2\" />\n              <span className=\"text-sm font-medium\">준비 중</span>\n            </div>\n            <p className=\"text-muted-foreground\" data-testid=\"text-placeholder-description\">\n              SKU 성과 분석, 재고 회전율, 수익성 분석 기능을 준비하고 있습니다.\n            </p>\n            <div className=\"space-y-2 text-sm text-muted-foreground\">\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                156개 SKU 데이터 수집 완료\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                오늘 2,847개 유닛 판매\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"w-2 h-2 bg-primary/50 rounded-full mr-2\"></div>\n                실시간 분석 대시보드 구축 중\n              </div>\n            </div>\n            <Link href=\"/ecommerce\">\n              <Button className=\"mt-4\" data-testid=\"button-back-to-hub-main\">\n                허브로 돌아가기\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3363}},"version":1}